{"version":3,"file":"sense-tests.bundle.js","sources":["D:\\Backup\\kibana\\optimize\\bundles\\sense-tests.entry.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\index.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\index.html","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\webpackShims\\qunit-1.10.0.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\webpackShims\\qunit-1.10.0.css","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\content_type.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\utils_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\utils_string_collapsing.txt","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\utils_string_expanding.txt","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\url_autocomplete_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\url_params_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\curl_parsing_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\curl_parsing_tests.txt","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\kb_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\mapping_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\editor_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\editor_input1.txt","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\input_tokenization_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\output_tokenization_tests.js","D:\\Backup\\kibana\\src\\core_plugins\\console\\public\\tests\\src\\integration_tests.js"],"sourcesContent":["'use strict';\n\n/**\n * Test entry file\n *\n * This is programatically created and updated, do not modify\n *\n * context: {\n  \"env\": \"development\",\n  \"sourceMaps\": \"#cheap-source-map\",\n  \"kbnVersion\": \"7.0.0-alpha1\",\n  \"buildNum\": 8467,\n  \"plugins\": [\n    \"console\",\n    \"dev_mode\",\n    \"elasticsearch\",\n    \"input_control_vis\",\n    \"kbn_doc_views\",\n    \"kbn_vislib_vis_types\",\n    \"kibana\",\n    \"markdown_vis\",\n    \"metric_vis\",\n    \"metrics\",\n    \"my-new-plugin\",\n    \"region_map\",\n    \"spy_modes\",\n    \"state_session_storage_redirect\",\n    \"status_page\",\n    \"table_vis\",\n    \"tagcloud\",\n    \"testbed\",\n    \"tests_bundle\",\n    \"tile_map\",\n    \"timelion\",\n    \"vega\"\n  ]\n}\n */\n\nrequire('ui/chrome');\nrequire('plugins/console/tests');\nrequire('plugins/console/hacks/register');\nrequire('plugins/kibana/dev_tools/hacks/hide_empty_tools');\nrequire('plugins/my-new-plugin/hack');\nrequire('plugins/testbed');\nrequire('plugins/timelion/lib/panel_registry');\nrequire('plugins/timelion/panels/timechart/timechart');\nrequire('ui/chrome').bootstrap();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./optimize/bundles/sense-tests.entry.js\n// module id = 3430\n// module chunks = 2","'use strict';\n\nrequire('./tests');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/index.js\n// module id = 3431\n// module chunks = 2","'use strict';\n\nrequire('ace');\n\nvar _module = require('ui/modules').get('app/sense');\n\n// mock the resize checker\n_module.run(function () {\n    _module.setupResizeCheckerForRootEditors = function () {};\n});\n\nrequire('ui/chrome').setRootTemplate(require('./index.html')).setRootController(function () {\n    window.QUnit = require('qunit-1.10.0');\n\n    require('qunit-1.10.0.css');\n    require('ace');\n    /* global QUnit */\n    QUnit.config.autostart = false;\n    QUnit.init();\n\n    require('./src/content_type.js');\n    require('./src/utils_tests.js');\n    require('./src/url_autocomplete_tests.js');\n    require('./src/url_params_tests.js');\n    require('./src/curl_parsing_tests.js');\n    require('./src/kb_tests.js');\n    require('./src/mapping_tests.js');\n    require('./src/editor_tests.js');\n    require('./src/input_tokenization_tests.js');\n    require('./src/output_tokenization_tests.js');\n    require('./src/integration_tests.js');\n\n    console.log('all tests loaded');\n    QUnit.start();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/tests.js\n// module id = 3432\n// module chunks = 2","module.exports = \"  <style type=\\\"text/css\\\">\\r\\n    #editor_container {\\r\\n      display: none;\\r\\n      position: absolute;\\r\\n      top: 20px;\\r\\n      bottom: 20px;\\r\\n      left: 20px;\\r\\n      right: 20px;\\r\\n      z-index: 200;\\r\\n      border: 1px solid #333;\\r\\n    }\\r\\n\\r\\n    #output_container {\\r\\n      display: none;\\r\\n      position: absolute;\\r\\n      height: 250px;\\r\\n      width: 350px;\\r\\n      bottom: 20px;\\r\\n      right: 20px;\\r\\n      z-index: 201;\\r\\n      border: 1px solid #333;\\r\\n    }\\r\\n\\r\\n    #editor, #output {\\r\\n      height: 100%;\\r\\n      width: 100%;\\r\\n      position: relative;\\r\\n    }\\r\\n  </style>\\r\\n<div id=\\\"qunit\\\"></div>\\r\\n<div id=\\\"editor_container\\\">\\r\\n  <div id=\\\"editor\\\"></div>\\r\\n</div>\\r\\n<div id=\\\"output_container\\\">\\r\\n  <div id=\\\"output\\\"></div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/index.html\n// module id = 3434\n// module chunks = 2","/**\r\n * QUnit v1.10.0 - A JavaScript Unit Testing Framework\r\n *\r\n * http://qunitjs.com\r\n *\r\n * Copyright 2012 jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */\r\n\r\n(function () {\r\n\r\n  var QUnit,\r\n      config,\r\n      onErrorFnPrev,\r\n      testId = 0,\r\n      fileName = (sourceFromStacktrace(0) || \"\" ).replace(/(:\\d+)+\\)?/, \"\").replace(/.+\\//, \"\"),\r\n      toString = Object.prototype.toString,\r\n      hasOwn = Object.prototype.hasOwnProperty,\r\n  // Keep a local reference to Date (GH-283)\r\n      Date = window.Date,\r\n      defined = {\r\n        setTimeout: typeof window.setTimeout !== \"undefined\",\r\n        sessionStorage: (function () {\r\n          var x = \"qunit-test-string\";\r\n          try {\r\n            sessionStorage.setItem(x, x);\r\n            sessionStorage.removeItem(x);\r\n            return true;\r\n          } catch (e) {\r\n            return false;\r\n          }\r\n        }())\r\n      };\r\n\r\n  function Test(settings) {\r\n    extend(this, settings);\r\n    this.assertions = [];\r\n    this.testNumber = ++Test.count;\r\n  }\r\n\r\n  Test.count = 0;\r\n\r\n  Test.prototype = {\r\n    init: function () {\r\n      var a, b, li,\r\n          tests = id(\"qunit-tests\");\r\n\r\n      if (tests) {\r\n        b = document.createElement(\"strong\");\r\n        b.innerHTML = this.name;\r\n\r\n        // `a` initialized at top of scope\r\n        a = document.createElement(\"a\");\r\n        a.innerHTML = \"Rerun\";\r\n        a.href = QUnit.url({ testNumber: this.testNumber });\r\n\r\n        li = document.createElement(\"li\");\r\n        li.appendChild(b);\r\n        li.appendChild(a);\r\n        li.className = \"running\";\r\n        li.id = this.id = \"qunit-test-output\" + testId++;\r\n\r\n        tests.appendChild(li);\r\n      }\r\n    },\r\n    setup: function () {\r\n      if (this.module !== config.previousModule) {\r\n        if (config.previousModule) {\r\n          runLoggingCallbacks(\"moduleDone\", QUnit, {\r\n            name: config.previousModule,\r\n            failed: config.moduleStats.bad,\r\n            passed: config.moduleStats.all - config.moduleStats.bad,\r\n            total: config.moduleStats.all\r\n          });\r\n        }\r\n        config.previousModule = this.module;\r\n        config.moduleStats = { all: 0, bad: 0 };\r\n        runLoggingCallbacks(\"moduleStart\", QUnit, {\r\n          name: this.module\r\n        });\r\n      } else if (config.autorun) {\r\n        runLoggingCallbacks(\"moduleStart\", QUnit, {\r\n          name: this.module\r\n        });\r\n      }\r\n\r\n      config.current = this;\r\n\r\n      this.testEnvironment = extend({\r\n        setup: function () {\r\n        },\r\n        teardown: function () {\r\n        }\r\n      }, this.moduleTestEnvironment);\r\n\r\n      runLoggingCallbacks(\"testStart\", QUnit, {\r\n        name: this.testName,\r\n        module: this.module\r\n      });\r\n\r\n      // allow utility functions to access the current test environment\r\n      // TODO why??\r\n      QUnit.current_testEnvironment = this.testEnvironment;\r\n\r\n      if (!config.pollution) {\r\n        saveGlobal();\r\n      }\r\n      if (config.notrycatch) {\r\n        this.testEnvironment.setup.call(this.testEnvironment);\r\n        return;\r\n      }\r\n      try {\r\n        this.testEnvironment.setup.call(this.testEnvironment);\r\n      } catch (e) {\r\n        QUnit.pushFailure(\"Setup failed on \" + this.testName + \": \" + e.message, extractStacktrace(e, 1));\r\n      }\r\n    },\r\n    run: function () {\r\n      config.current = this;\r\n\r\n      var running = id(\"qunit-testresult\");\r\n\r\n      if (running) {\r\n        running.innerHTML = \"Running: <br/>\" + this.name;\r\n      }\r\n\r\n      if (this.async) {\r\n        QUnit.stop();\r\n      }\r\n\r\n      if (config.notrycatch) {\r\n        this.callback.call(this.testEnvironment, QUnit.assert);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        this.callback.call(this.testEnvironment, QUnit.assert);\r\n      } catch (e) {\r\n        QUnit.pushFailure(\"Died on test #\" + (this.assertions.length + 1) + \" \" + this.stack + \": \" + e.message, extractStacktrace(e, 0));\r\n        // else next test will carry the responsibility\r\n        saveGlobal();\r\n\r\n        // Restart the tests if they're blocking\r\n        if (config.blocking) {\r\n          QUnit.start();\r\n        }\r\n      }\r\n    },\r\n    teardown: function () {\r\n      config.current = this;\r\n      if (config.notrycatch) {\r\n        this.testEnvironment.teardown.call(this.testEnvironment);\r\n        return;\r\n      } else {\r\n        try {\r\n          this.testEnvironment.teardown.call(this.testEnvironment);\r\n        } catch (e) {\r\n          QUnit.pushFailure(\"Teardown failed on \" + this.testName + \": \" + e.message, extractStacktrace(e, 1));\r\n        }\r\n      }\r\n      checkPollution();\r\n    },\r\n    finish: function () {\r\n      config.current = this;\r\n      if (config.requireExpects && this.expected == null) {\r\n        QUnit.pushFailure(\"Expected number of assertions to be defined, but expect() was not called.\", this.stack);\r\n      } else if (this.expected != null && this.expected != this.assertions.length) {\r\n        QUnit.pushFailure(\"Expected \" + this.expected + \" assertions, but \" + this.assertions.length + \" were run\", this.stack);\r\n      } else if (this.expected == null && !this.assertions.length) {\r\n        QUnit.pushFailure(\"Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\", this.stack);\r\n      }\r\n\r\n      var assertion, a, b, i, li, ol,\r\n          test = this,\r\n          good = 0,\r\n          bad = 0,\r\n          tests = id(\"qunit-tests\");\r\n\r\n      config.stats.all += this.assertions.length;\r\n      config.moduleStats.all += this.assertions.length;\r\n\r\n      if (tests) {\r\n        ol = document.createElement(\"ol\");\r\n\r\n        for (i = 0; i < this.assertions.length; i++) {\r\n          assertion = this.assertions[i];\r\n\r\n          li = document.createElement(\"li\");\r\n          li.className = assertion.result ? \"pass\" : \"fail\";\r\n          li.innerHTML = assertion.message || ( assertion.result ? \"okay\" : \"failed\" );\r\n          ol.appendChild(li);\r\n\r\n          if (assertion.result) {\r\n            good++;\r\n          } else {\r\n            bad++;\r\n            config.stats.bad++;\r\n            config.moduleStats.bad++;\r\n          }\r\n        }\r\n\r\n        // store result when possible\r\n        if (QUnit.config.reorder && defined.sessionStorage) {\r\n          if (bad) {\r\n            sessionStorage.setItem(\"qunit-test-\" + this.module + \"-\" + this.testName, bad);\r\n          } else {\r\n            sessionStorage.removeItem(\"qunit-test-\" + this.module + \"-\" + this.testName);\r\n          }\r\n        }\r\n\r\n        if (bad === 0) {\r\n          ol.style.display = \"none\";\r\n        }\r\n\r\n        // `b` initialized at top of scope\r\n        b = document.createElement(\"strong\");\r\n        b.innerHTML = this.name + \" <b class='counts'>(<b class='failed'>\" + bad + \"</b>, <b class='passed'>\" + good + \"</b>, \" + this.assertions.length + \")</b>\";\r\n\r\n        addEvent(b, \"click\", function () {\r\n          var next = b.nextSibling.nextSibling,\r\n              display = next.style.display;\r\n          next.style.display = display === \"none\" ? \"block\" : \"none\";\r\n        });\r\n\r\n        addEvent(b, \"dblclick\", function (e) {\r\n          var target = e && e.target ? e.target : window.event.srcElement;\r\n          if (target.nodeName.toLowerCase() == \"span\" || target.nodeName.toLowerCase() == \"b\") {\r\n            target = target.parentNode;\r\n          }\r\n          if (window.location && target.nodeName.toLowerCase() === \"strong\") {\r\n            window.location = QUnit.url({ testNumber: test.testNumber });\r\n          }\r\n        });\r\n\r\n        // `li` initialized at top of scope\r\n        li = id(this.id);\r\n        li.className = bad ? \"fail\" : \"pass\";\r\n        li.removeChild(li.firstChild);\r\n        a = li.firstChild;\r\n        li.appendChild(b);\r\n        li.appendChild(a);\r\n        li.appendChild(ol);\r\n\r\n      } else {\r\n        for (i = 0; i < this.assertions.length; i++) {\r\n          if (!this.assertions[i].result) {\r\n            bad++;\r\n            config.stats.bad++;\r\n            config.moduleStats.bad++;\r\n          }\r\n        }\r\n      }\r\n\r\n      runLoggingCallbacks(\"testDone\", QUnit, {\r\n        name: this.testName,\r\n        module: this.module,\r\n        failed: bad,\r\n        passed: this.assertions.length - bad,\r\n        total: this.assertions.length\r\n      });\r\n\r\n      QUnit.reset();\r\n\r\n      config.current = undefined;\r\n    },\r\n\r\n    queue: function () {\r\n      var bad,\r\n          test = this;\r\n\r\n      synchronize(function () {\r\n        test.init();\r\n      });\r\n      function run() {\r\n        // each of these can by async\r\n        synchronize(function () {\r\n          test.setup();\r\n        });\r\n        synchronize(function () {\r\n          test.run();\r\n        });\r\n        synchronize(function () {\r\n          test.teardown();\r\n        });\r\n        synchronize(function () {\r\n          test.finish();\r\n        });\r\n      }\r\n\r\n      // `bad` initialized at top of scope\r\n      // defer when previous test run passed, if storage is available\r\n      bad = QUnit.config.reorder && defined.sessionStorage && +sessionStorage.getItem(\"qunit-test-\" + this.module + \"-\" + this.testName);\r\n\r\n      if (bad) {\r\n        run();\r\n      } else {\r\n        synchronize(run, true);\r\n      }\r\n    }\r\n  };\r\n\r\n// Root QUnit object.\r\n// `QUnit` initialized at top of scope\r\n  QUnit = {\r\n\r\n    // call on start of module test to prepend name to all tests\r\n    module: function (name, testEnvironment) {\r\n      config.currentModule = name;\r\n      config.currentModuleTestEnvironment = testEnvironment;\r\n      config.modules[name] = true;\r\n    },\r\n\r\n    asyncTest: function (testName, expected, callback) {\r\n      if (arguments.length === 2) {\r\n        callback = expected;\r\n        expected = null;\r\n      }\r\n\r\n      QUnit.test(testName, expected, callback, true);\r\n    },\r\n\r\n    test: function (testName, expected, callback, async) {\r\n      var test,\r\n          name = \"<span class='test-name'>\" + escapeInnerText(testName) + \"</span>\";\r\n\r\n      if (arguments.length === 2) {\r\n        callback = expected;\r\n        expected = null;\r\n      }\r\n\r\n      if (config.currentModule) {\r\n        name = \"<span class='module-name'>\" + config.currentModule + \"</span>: \" + name;\r\n      }\r\n\r\n      test = new Test({\r\n        name: name,\r\n        testName: testName,\r\n        expected: expected,\r\n        async: async,\r\n        callback: callback,\r\n        module: config.currentModule,\r\n        moduleTestEnvironment: config.currentModuleTestEnvironment,\r\n        stack: sourceFromStacktrace(2)\r\n      });\r\n\r\n      if (!validTest(test)) {\r\n        return;\r\n      }\r\n\r\n      test.queue();\r\n    },\r\n\r\n    // Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.\r\n    expect: function (asserts) {\r\n      if (arguments.length === 1) {\r\n        config.current.expected = asserts;\r\n      } else {\r\n        return config.current.expected;\r\n      }\r\n    },\r\n\r\n    start: function (count) {\r\n      config.semaphore -= count || 1;\r\n      // don't start until equal number of stop-calls\r\n      if (config.semaphore > 0) {\r\n        return;\r\n      }\r\n      // ignore if start is called more often then stop\r\n      if (config.semaphore < 0) {\r\n        config.semaphore = 0;\r\n      }\r\n      // A slight delay, to avoid any current callbacks\r\n      if (defined.setTimeout) {\r\n        window.setTimeout(function () {\r\n          if (config.semaphore > 0) {\r\n            return;\r\n          }\r\n          if (config.timeout) {\r\n            clearTimeout(config.timeout);\r\n          }\r\n\r\n          config.blocking = false;\r\n          process(true);\r\n        }, 13);\r\n      } else {\r\n        config.blocking = false;\r\n        process(true);\r\n      }\r\n    },\r\n\r\n    stop: function (count) {\r\n      config.semaphore += count || 1;\r\n      config.blocking = true;\r\n\r\n      if (config.testTimeout && defined.setTimeout) {\r\n        clearTimeout(config.timeout);\r\n        config.timeout = window.setTimeout(function () {\r\n          QUnit.ok(false, \"Test timed out\");\r\n          config.semaphore = 1;\r\n          QUnit.start();\r\n        }, config.testTimeout);\r\n      }\r\n    }\r\n  };\r\n\r\n// Asssert helpers\r\n// All of these must call either QUnit.push() or manually do:\r\n// - runLoggingCallbacks( \"log\", .. );\r\n// - config.current.assertions.push({ .. });\r\n  QUnit.assert = {\r\n    /**\r\n     * Asserts rough true-ish result.\r\n     * @name ok\r\n     * @function\r\n     * @example ok( \"asdfasdf\".length > 5, \"There must be at least 5 chars\" );\r\n     */\r\n    ok: function (result, msg) {\r\n      if (!config.current) {\r\n        throw new Error(\"ok() assertion outside test context, was \" + sourceFromStacktrace(2));\r\n      }\r\n      result = !!result;\r\n\r\n      var source,\r\n          details = {\r\n            module: config.current.module,\r\n            name: config.current.testName,\r\n            result: result,\r\n            message: msg\r\n          };\r\n\r\n      msg = escapeInnerText(msg || (result ? \"okay\" : \"failed\" ));\r\n      msg = \"<span class='test-message'>\" + msg + \"</span>\";\r\n\r\n      if (!result) {\r\n        source = sourceFromStacktrace(2);\r\n        if (source) {\r\n          details.source = source;\r\n          msg += \"<table><tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr></table>\";\r\n        }\r\n      }\r\n      runLoggingCallbacks(\"log\", QUnit, details);\r\n      config.current.assertions.push({\r\n        result: result,\r\n        message: msg\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Assert that the first two arguments are equal, with an optional message.\r\n     * Prints out both actual and expected values.\r\n     * @name equal\r\n     * @function\r\n     * @example equal( format( \"Received {0} bytes.\", 2), \"Received 2 bytes.\", \"format() replaces {0} with next argument\" );\r\n     */\r\n    equal: function (actual, expected, message) {\r\n      QUnit.push(expected == actual, actual, expected, message);\r\n    },\r\n\r\n    /**\r\n     * @name notEqual\r\n     * @function\r\n     */\r\n    notEqual: function (actual, expected, message) {\r\n      QUnit.push(expected != actual, actual, expected, message);\r\n    },\r\n\r\n    /**\r\n     * @name deepEqual\r\n     * @function\r\n     */\r\n    deepEqual: function (actual, expected, message) {\r\n      QUnit.push(QUnit.equiv(actual, expected), actual, expected, message);\r\n    },\r\n\r\n    /**\r\n     * @name notDeepEqual\r\n     * @function\r\n     */\r\n    notDeepEqual: function (actual, expected, message) {\r\n      QUnit.push(!QUnit.equiv(actual, expected), actual, expected, message);\r\n    },\r\n\r\n    /**\r\n     * @name strictEqual\r\n     * @function\r\n     */\r\n    strictEqual: function (actual, expected, message) {\r\n      QUnit.push(expected === actual, actual, expected, message);\r\n    },\r\n\r\n    /**\r\n     * @name notStrictEqual\r\n     * @function\r\n     */\r\n    notStrictEqual: function (actual, expected, message) {\r\n      QUnit.push(expected !== actual, actual, expected, message);\r\n    },\r\n\r\n    throws: function (block, expected, message) {\r\n      var actual,\r\n          ok = false;\r\n\r\n      // 'expected' is optional\r\n      if (typeof expected === \"string\") {\r\n        message = expected;\r\n        expected = null;\r\n      }\r\n\r\n      config.current.ignoreGlobalErrors = true;\r\n      try {\r\n        block.call(config.current.testEnvironment);\r\n      } catch (e) {\r\n        actual = e;\r\n      }\r\n      config.current.ignoreGlobalErrors = false;\r\n\r\n      if (actual) {\r\n        // we don't want to validate thrown error\r\n        if (!expected) {\r\n          ok = true;\r\n          // expected is a regexp\r\n        } else if (QUnit.objectType(expected) === \"regexp\") {\r\n          ok = expected.test(actual);\r\n          // expected is a constructor\r\n        } else if (actual instanceof expected) {\r\n          ok = true;\r\n          // expected is a validation function which returns true is validation passed\r\n        } else if (expected.call({}, actual) === true) {\r\n          ok = true;\r\n        }\r\n\r\n        QUnit.push(ok, actual, null, message);\r\n      } else {\r\n        QUnit.pushFailure(message, null, 'No exception was thrown.');\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @deprecate since 1.8.0\r\n   * Kept assertion helpers in root for backwards compatibility\r\n   */\r\n  extend(QUnit, QUnit.assert);\r\n\r\n  /**\r\n   * @deprecated since 1.9.0\r\n   * Kept global \"raises()\" for backwards compatibility\r\n   */\r\n  QUnit.raises = QUnit.assert.throws;\r\n\r\n  /**\r\n   * @deprecated since 1.0.0, replaced with error pushes since 1.3.0\r\n   * Kept to avoid TypeErrors for undefined methods.\r\n   */\r\n  QUnit.equals = function () {\r\n    QUnit.push(false, false, false, \"QUnit.equals has been deprecated since 2009 (e88049a0), use QUnit.equal instead\");\r\n  };\r\n  QUnit.same = function () {\r\n    QUnit.push(false, false, false, \"QUnit.same has been deprecated since 2009 (e88049a0), use QUnit.deepEqual instead\");\r\n  };\r\n\r\n// We want access to the constructor's prototype\r\n  (function () {\r\n    function F() {\r\n    }\r\n\r\n    F.prototype = QUnit;\r\n    QUnit = new F();\r\n    // Make F QUnit's constructor so that we can add to the prototype later\r\n    QUnit.constructor = F;\r\n  }());\r\n\r\n  /**\r\n   * Config object: Maintain internal state\r\n   * Later exposed as QUnit.config\r\n   * `config` initialized at top of scope\r\n   */\r\n  config = {\r\n    // The queue of tests to run\r\n    queue: [],\r\n\r\n    // block until document ready\r\n    blocking: true,\r\n\r\n    // when enabled, show only failing tests\r\n    // gets persisted through sessionStorage and can be changed in UI via checkbox\r\n    hidepassed: false,\r\n\r\n    // by default, run previously failed tests first\r\n    // very useful in combination with \"Hide passed tests\" checked\r\n    reorder: true,\r\n\r\n    // by default, modify document.title when suite is done\r\n    altertitle: true,\r\n\r\n    // when enabled, all tests must call expect()\r\n    requireExpects: false,\r\n\r\n    // add checkboxes that are persisted in the query-string\r\n    // when enabled, the id is set to `true` as a `QUnit.config` property\r\n    urlConfig: [\r\n      {\r\n        id: \"noglobals\",\r\n        label: \"Check for Globals\",\r\n        tooltip: \"Enabling this will test if any test introduces new properties on the `window` object. Stored as query-strings.\"\r\n      },\r\n      {\r\n        id: \"notrycatch\",\r\n        label: \"No try-catch\",\r\n        tooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings.\"\r\n      }\r\n    ],\r\n\r\n    // Set of all modules.\r\n    modules: {},\r\n\r\n    // logging callback queues\r\n    begin: [],\r\n    done: [],\r\n    log: [],\r\n    testStart: [],\r\n    testDone: [],\r\n    moduleStart: [],\r\n    moduleDone: []\r\n  };\r\n\r\n// Initialize more QUnit.config and QUnit.urlParams\r\n  (function () {\r\n    var i,\r\n        location = window.location || { search: \"\", protocol: \"file:\" },\r\n        params = location.search.slice(1).split(\"&\"),\r\n        length = params.length,\r\n        urlParams = {},\r\n        current;\r\n\r\n    if (params[ 0 ]) {\r\n      for (i = 0; i < length; i++) {\r\n        current = params[ i ].split(\"=\");\r\n        current[ 0 ] = decodeURIComponent(current[ 0 ]);\r\n        // allow just a key to turn on a flag, e.g., test.html?noglobals\r\n        current[ 1 ] = current[ 1 ] ? decodeURIComponent(current[ 1 ]) : true;\r\n        urlParams[ current[ 0 ] ] = current[ 1 ];\r\n      }\r\n    }\r\n\r\n    QUnit.urlParams = urlParams;\r\n\r\n    // String search anywhere in moduleName+testName\r\n    config.filter = urlParams.filter;\r\n\r\n    // Exact match of the module name\r\n    config.module = urlParams.module;\r\n\r\n    config.testNumber = parseInt(urlParams.testNumber, 10) || null;\r\n\r\n    // Figure out if we're running the tests from a server or not\r\n    QUnit.isLocal = location.protocol === \"file:\";\r\n  }());\r\n\r\n// Export global variables, unless an 'exports' object exists,\r\n// in that case we assume we're in CommonJS (dealt with on the bottom of the script)\r\n  if (typeof exports === \"undefined\") {\r\n    extend(window, QUnit);\r\n\r\n    // Expose QUnit object\r\n    window.QUnit = QUnit;\r\n  }\r\n\r\n// Extend QUnit object,\r\n// these after set here because they should not be exposed as global functions\r\n  extend(QUnit, {\r\n    config: config,\r\n\r\n    // Initialize the configuration options\r\n    init: function () {\r\n      extend(config, {\r\n        stats: { all: 0, bad: 0 },\r\n        moduleStats: { all: 0, bad: 0 },\r\n        started: +new Date(),\r\n        updateRate: 1000,\r\n        blocking: false,\r\n        autostart: true,\r\n        autorun: false,\r\n        filter: \"\",\r\n        queue: [],\r\n        semaphore: 0\r\n      });\r\n\r\n      var tests, banner, result,\r\n          qunit = id(\"qunit\");\r\n\r\n      if (qunit) {\r\n        qunit.innerHTML =\r\n            \"<h1 id='qunit-header'>\" + escapeInnerText(document.title) + \"</h1>\" +\r\n                \"<h2 id='qunit-banner'></h2>\" +\r\n                \"<div id='qunit-testrunner-toolbar'></div>\" +\r\n                \"<h2 id='qunit-userAgent'></h2>\" +\r\n                \"<ol id='qunit-tests'></ol>\";\r\n      }\r\n\r\n      tests = id(\"qunit-tests\");\r\n      banner = id(\"qunit-banner\");\r\n      result = id(\"qunit-testresult\");\r\n\r\n      if (tests) {\r\n        tests.innerHTML = \"\";\r\n      }\r\n\r\n      if (banner) {\r\n        banner.className = \"\";\r\n      }\r\n\r\n      if (result) {\r\n        result.parentNode.removeChild(result);\r\n      }\r\n\r\n      if (tests) {\r\n        result = document.createElement(\"p\");\r\n        result.id = \"qunit-testresult\";\r\n        result.className = \"result\";\r\n        tests.parentNode.insertBefore(result, tests);\r\n        result.innerHTML = \"Running...<br/>&nbsp;\";\r\n      }\r\n    },\r\n\r\n    // Resets the test setup. Useful for tests that modify the DOM.\r\n    reset: function () {\r\n      var fixture = id(\"qunit-fixture\");\r\n      if (fixture) {\r\n        fixture.innerHTML = config.fixture;\r\n      }\r\n    },\r\n\r\n    // Trigger an event on an element.\r\n    // @example triggerEvent( document.body, \"click\" );\r\n    triggerEvent: function (elem, type, event) {\r\n      if (document.createEvent) {\r\n        event = document.createEvent(\"MouseEvents\");\r\n        event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView,\r\n            0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n\r\n        elem.dispatchEvent(event);\r\n      } else if (elem.fireEvent) {\r\n        elem.fireEvent(\"on\" + type);\r\n      }\r\n    },\r\n\r\n    // Safe object type checking\r\n    is: function (type, obj) {\r\n      return QUnit.objectType(obj) == type;\r\n    },\r\n\r\n    objectType: function (obj) {\r\n      if (typeof obj === \"undefined\") {\r\n        return \"undefined\";\r\n        // consider: typeof null === object\r\n      }\r\n      if (obj === null) {\r\n        return \"null\";\r\n      }\r\n\r\n      var type = toString.call(obj).match(/^\\[object\\s(.*)\\]$/)[1] || \"\";\r\n\r\n      switch (type) {\r\n        case \"Number\":\r\n          if (isNaN(obj)) {\r\n            return \"nan\";\r\n          }\r\n          return \"number\";\r\n        case \"String\":\r\n        case \"Boolean\":\r\n        case \"Array\":\r\n        case \"Date\":\r\n        case \"RegExp\":\r\n        case \"Function\":\r\n          return type.toLowerCase();\r\n      }\r\n      if (typeof obj === \"object\") {\r\n        return \"object\";\r\n      }\r\n      return undefined;\r\n    },\r\n\r\n    push: function (result, actual, expected, message) {\r\n      if (!config.current) {\r\n        throw new Error(\"assertion outside test context, was \" + sourceFromStacktrace());\r\n      }\r\n\r\n      var output, source,\r\n          details = {\r\n            module: config.current.module,\r\n            name: config.current.testName,\r\n            result: result,\r\n            message: message,\r\n            actual: actual,\r\n            expected: expected\r\n          };\r\n\r\n      message = escapeInnerText(message) || ( result ? \"okay\" : \"failed\" );\r\n      message = \"<span class='test-message'>\" + message + \"</span>\";\r\n      output = message;\r\n\r\n      if (!result) {\r\n        expected = escapeInnerText(QUnit.jsDump.parse(expected));\r\n        actual = escapeInnerText(QUnit.jsDump.parse(actual));\r\n        output += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" + expected + \"</pre></td></tr>\";\r\n\r\n        if (actual != expected) {\r\n          output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + actual + \"</pre></td></tr>\";\r\n          output += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" + QUnit.diff(expected, actual) + \"</pre></td></tr>\";\r\n        }\r\n\r\n        source = sourceFromStacktrace();\r\n\r\n        if (source) {\r\n          details.source = source;\r\n          output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr>\";\r\n        }\r\n\r\n        output += \"</table>\";\r\n      }\r\n\r\n      runLoggingCallbacks(\"log\", QUnit, details);\r\n\r\n      config.current.assertions.push({\r\n        result: !!result,\r\n        message: output\r\n      });\r\n    },\r\n\r\n    pushFailure: function (message, source, actual) {\r\n      if (!config.current) {\r\n        throw new Error(\"pushFailure() assertion outside test context, was \" + sourceFromStacktrace(2));\r\n      }\r\n\r\n      var output,\r\n          details = {\r\n            module: config.current.module,\r\n            name: config.current.testName,\r\n            result: false,\r\n            message: message\r\n          };\r\n\r\n      message = escapeInnerText(message) || \"error\";\r\n      message = \"<span class='test-message'>\" + message + \"</span>\";\r\n      output = message;\r\n\r\n      output += \"<table>\";\r\n\r\n      if (actual) {\r\n        output += \"<tr class='test-actual'><th>Result: </th><td><pre>\" + escapeInnerText(actual) + \"</pre></td></tr>\";\r\n      }\r\n\r\n      if (source) {\r\n        details.source = source;\r\n        output += \"<tr class='test-source'><th>Source: </th><td><pre>\" + escapeInnerText(source) + \"</pre></td></tr>\";\r\n      }\r\n\r\n      output += \"</table>\";\r\n\r\n      runLoggingCallbacks(\"log\", QUnit, details);\r\n\r\n      config.current.assertions.push({\r\n        result: false,\r\n        message: output\r\n      });\r\n    },\r\n\r\n    url: function (params) {\r\n      params = extend(extend({}, QUnit.urlParams), params);\r\n      var key,\r\n          querystring = \"?\";\r\n\r\n      for (key in params) {\r\n        if (!hasOwn.call(params, key)) {\r\n          continue;\r\n        }\r\n        querystring += encodeURIComponent(key) + \"=\" +\r\n            encodeURIComponent(params[ key ]) + \"&\";\r\n      }\r\n      return window.location.pathname + querystring.slice(0, -1);\r\n    },\r\n\r\n    extend: extend,\r\n    id: id,\r\n    addEvent: addEvent\r\n    // load, equiv, jsDump, diff: Attached later\r\n  });\r\n\r\n  /**\r\n   * @deprecated: Created for backwards compatibility with test runner that set the hook function\r\n   * into QUnit.{hook}, instead of invoking it and passing the hook function.\r\n   * QUnit.constructor is set to the empty F() above so that we can add to it's prototype here.\r\n   * Doing this allows us to tell if the following methods have been overwritten on the actual\r\n   * QUnit object.\r\n   */\r\n  extend(QUnit.constructor.prototype, {\r\n\r\n    // Logging callbacks; all receive a single argument with the listed properties\r\n    // run test/logs.html for any related changes\r\n    begin: registerLoggingCallback(\"begin\"),\r\n\r\n    // done: { failed, passed, total, runtime }\r\n    done: registerLoggingCallback(\"done\"),\r\n\r\n    // log: { result, actual, expected, message }\r\n    log: registerLoggingCallback(\"log\"),\r\n\r\n    // testStart: { name }\r\n    testStart: registerLoggingCallback(\"testStart\"),\r\n\r\n    // testDone: { name, failed, passed, total }\r\n    testDone: registerLoggingCallback(\"testDone\"),\r\n\r\n    // moduleStart: { name }\r\n    moduleStart: registerLoggingCallback(\"moduleStart\"),\r\n\r\n    // moduleDone: { name, failed, passed, total }\r\n    moduleDone: registerLoggingCallback(\"moduleDone\")\r\n  });\r\n\r\n  if (typeof document === \"undefined\" || document.readyState === \"complete\") {\r\n    config.autorun = true;\r\n  }\r\n\r\n  QUnit.load = function () {\r\n    runLoggingCallbacks(\"begin\", QUnit, {});\r\n\r\n    // Initialize the config, saving the execution queue\r\n    var banner, filter, i, label, len, main, ol, toolbar, userAgent, val, urlConfigCheckboxes, moduleFilter,\r\n        numModules = 0,\r\n        moduleFilterHtml = \"\",\r\n        urlConfigHtml = \"\",\r\n        oldconfig = extend({}, config);\r\n\r\n    QUnit.init();\r\n    extend(config, oldconfig);\r\n\r\n    config.blocking = false;\r\n\r\n    len = config.urlConfig.length;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      val = config.urlConfig[i];\r\n      if (typeof val === \"string\") {\r\n        val = {\r\n          id: val,\r\n          label: val,\r\n          tooltip: \"[no tooltip available]\"\r\n        };\r\n      }\r\n      config[ val.id ] = QUnit.urlParams[ val.id ];\r\n      urlConfigHtml += \"<input id='qunit-urlconfig-\" + val.id + \"' name='\" + val.id + \"' type='checkbox'\" + ( config[ val.id ] ? \" checked='checked'\" : \"\" ) + \" title='\" + val.tooltip + \"'><label for='qunit-urlconfig-\" + val.id + \"' title='\" + val.tooltip + \"'>\" + val.label + \"</label>\";\r\n    }\r\n\r\n    moduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' \" + ( config.module === undefined ? \"selected\" : \"\" ) + \">< All Modules ></option>\";\r\n    for (i in config.modules) {\r\n      if (config.modules.hasOwnProperty(i)) {\r\n        numModules += 1;\r\n        moduleFilterHtml += \"<option value='\" + encodeURIComponent(i) + \"' \" + ( config.module === i ? \"selected\" : \"\" ) + \">\" + i + \"</option>\";\r\n      }\r\n    }\r\n    moduleFilterHtml += \"</select>\";\r\n\r\n    // `userAgent` initialized at top of scope\r\n    userAgent = id(\"qunit-userAgent\");\r\n    if (userAgent) {\r\n      userAgent.innerHTML = navigator.userAgent;\r\n    }\r\n\r\n    // `banner` initialized at top of scope\r\n    banner = id(\"qunit-header\");\r\n    if (banner) {\r\n      banner.innerHTML = \"<a href='\" + QUnit.url({ filter: undefined, module: undefined, testNumber: undefined }) + \"'>\" + banner.innerHTML + \"</a> \";\r\n    }\r\n\r\n    // `toolbar` initialized at top of scope\r\n    toolbar = id(\"qunit-testrunner-toolbar\");\r\n    if (toolbar) {\r\n      // `filter` initialized at top of scope\r\n      filter = document.createElement(\"input\");\r\n      filter.type = \"checkbox\";\r\n      filter.id = \"qunit-filter-pass\";\r\n\r\n      addEvent(filter, \"click\", function () {\r\n        var tmp,\r\n            ol = document.getElementById(\"qunit-tests\");\r\n\r\n        if (filter.checked) {\r\n          ol.className = ol.className + \" hidepass\";\r\n        } else {\r\n          tmp = \" \" + ol.className.replace(/[\\n\\t\\r]/g, \" \") + \" \";\r\n          ol.className = tmp.replace(/ hidepass /, \" \");\r\n        }\r\n        if (defined.sessionStorage) {\r\n          if (filter.checked) {\r\n            sessionStorage.setItem(\"qunit-filter-passed-tests\", \"true\");\r\n          } else {\r\n            sessionStorage.removeItem(\"qunit-filter-passed-tests\");\r\n          }\r\n        }\r\n      });\r\n\r\n      if (config.hidepassed || defined.sessionStorage && sessionStorage.getItem(\"qunit-filter-passed-tests\")) {\r\n        filter.checked = true;\r\n        // `ol` initialized at top of scope\r\n        ol = document.getElementById(\"qunit-tests\");\r\n        ol.className = ol.className + \" hidepass\";\r\n      }\r\n      toolbar.appendChild(filter);\r\n\r\n      // `label` initialized at top of scope\r\n      label = document.createElement(\"label\");\r\n      label.setAttribute(\"for\", \"qunit-filter-pass\");\r\n      label.setAttribute(\"title\", \"Only show tests and assertons that fail. Stored in sessionStorage.\");\r\n      label.innerHTML = \"Hide passed tests\";\r\n      toolbar.appendChild(label);\r\n\r\n      urlConfigCheckboxes = document.createElement('span');\r\n      urlConfigCheckboxes.innerHTML = urlConfigHtml;\r\n      addEvent(urlConfigCheckboxes, \"change\", function (event) {\r\n        var params = {};\r\n        params[ event.target.name ] = event.target.checked ? true : undefined;\r\n        window.location = QUnit.url(params);\r\n      });\r\n      toolbar.appendChild(urlConfigCheckboxes);\r\n\r\n      if (numModules > 1) {\r\n        moduleFilter = document.createElement('span');\r\n        moduleFilter.setAttribute('id', 'qunit-modulefilter-container');\r\n        moduleFilter.innerHTML = moduleFilterHtml;\r\n        addEvent(moduleFilter, \"change\", function () {\r\n          var selectBox = moduleFilter.getElementsByTagName(\"select\")[0],\r\n              selectedModule = decodeURIComponent(selectBox.options[selectBox.selectedIndex].value);\r\n\r\n          window.location = QUnit.url({ module: ( selectedModule === \"\" ) ? undefined : selectedModule });\r\n        });\r\n        toolbar.appendChild(moduleFilter);\r\n      }\r\n    }\r\n\r\n    // `main` initialized at top of scope\r\n    main = id(\"qunit-fixture\");\r\n    if (main) {\r\n      config.fixture = main.innerHTML;\r\n    }\r\n\r\n    if (config.autostart) {\r\n      QUnit.start();\r\n    }\r\n  };\r\n\r\n  addEvent(window, \"load\", QUnit.load);\r\n\r\n// `onErrorFnPrev` initialized at top of scope\r\n// Preserve other handlers\r\n  onErrorFnPrev = window.onerror;\r\n\r\n// Cover uncaught exceptions\r\n// Returning true will surpress the default browser handler,\r\n// returning false will let it run.\r\n  window.onerror = function (error, filePath, linerNr) {\r\n    var ret = false;\r\n    if (onErrorFnPrev) {\r\n      ret = onErrorFnPrev(error, filePath, linerNr);\r\n    }\r\n\r\n    // Treat return value as window.onerror itself does,\r\n    // Only do our handling if not surpressed.\r\n    if (ret !== true) {\r\n      if (QUnit.config.current) {\r\n        if (QUnit.config.current.ignoreGlobalErrors) {\r\n          return true;\r\n        }\r\n        QUnit.pushFailure(error, filePath + \":\" + linerNr);\r\n      } else {\r\n        QUnit.test(\"global failure\", extend(function () {\r\n          QUnit.pushFailure(error, filePath + \":\" + linerNr);\r\n        }, { validTest: validTest }));\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return ret;\r\n  };\r\n\r\n  function done() {\r\n    config.autorun = true;\r\n\r\n    // Log the last module results\r\n    if (config.currentModule) {\r\n      runLoggingCallbacks(\"moduleDone\", QUnit, {\r\n        name: config.currentModule,\r\n        failed: config.moduleStats.bad,\r\n        passed: config.moduleStats.all - config.moduleStats.bad,\r\n        total: config.moduleStats.all\r\n      });\r\n    }\r\n\r\n    var i, key,\r\n        banner = id(\"qunit-banner\"),\r\n        tests = id(\"qunit-tests\"),\r\n        runtime = +new Date() - config.started,\r\n        passed = config.stats.all - config.stats.bad,\r\n        html = [\r\n          \"Tests completed in \",\r\n          runtime,\r\n          \" milliseconds.<br/>\",\r\n          \"<span class='passed'>\",\r\n          passed,\r\n          \"</span> tests of <span class='total'>\",\r\n          config.stats.all,\r\n          \"</span> passed, <span class='failed'>\",\r\n          config.stats.bad,\r\n          \"</span> failed.\"\r\n        ].join(\"\");\r\n\r\n    if (banner) {\r\n      banner.className = ( config.stats.bad ? \"qunit-fail\" : \"qunit-pass\" );\r\n    }\r\n\r\n    if (tests) {\r\n      id(\"qunit-testresult\").innerHTML = html;\r\n    }\r\n\r\n    if (config.altertitle && typeof document !== \"undefined\" && document.title) {\r\n      // show ✖ for good, ✔ for bad suite result in title\r\n      // use escape sequences in case file gets loaded with non-utf-8-charset\r\n      document.title = [\r\n        ( config.stats.bad ? \"\\u2716\" : \"\\u2714\" ),\r\n        document.title.replace(/^[\\u2714\\u2716] /i, \"\")\r\n      ].join(\" \");\r\n    }\r\n\r\n    // clear own sessionStorage items if all tests passed\r\n    if (config.reorder && defined.sessionStorage && config.stats.bad === 0) {\r\n      // `key` & `i` initialized at top of scope\r\n      for (i = 0; i < sessionStorage.length; i++) {\r\n        key = sessionStorage.key(i++);\r\n        if (key.indexOf(\"qunit-test-\") === 0) {\r\n          sessionStorage.removeItem(key);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scroll back to top to show results\r\n    if (window.scrollTo) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n\r\n    runLoggingCallbacks(\"done\", QUnit, {\r\n      failed: config.stats.bad,\r\n      passed: passed,\r\n      total: config.stats.all,\r\n      runtime: runtime\r\n    });\r\n  }\r\n\r\n  /** @return Boolean: true if this test should be ran */\r\n  function validTest(test) {\r\n    var include,\r\n        filter = config.filter && config.filter.toLowerCase(),\r\n        module = config.module && config.module.toLowerCase(),\r\n        fullName = (test.module + \": \" + test.testName).toLowerCase();\r\n\r\n    // Internally-generated tests are always valid\r\n    if (test.callback && test.callback.validTest === validTest) {\r\n      delete test.callback.validTest;\r\n      return true;\r\n    }\r\n\r\n    if (config.testNumber) {\r\n      return test.testNumber === config.testNumber;\r\n    }\r\n\r\n    if (module && ( !test.module || test.module.toLowerCase() !== module )) {\r\n      return false;\r\n    }\r\n\r\n    if (!filter) {\r\n      return true;\r\n    }\r\n\r\n    include = filter.charAt(0) !== \"!\";\r\n    if (!include) {\r\n      filter = filter.slice(1);\r\n    }\r\n\r\n    // If the filter matches, we need to honour include\r\n    if (fullName.indexOf(filter) !== -1) {\r\n      return include;\r\n    }\r\n\r\n    // Otherwise, do the opposite\r\n    return !include;\r\n  }\r\n\r\n// so far supports only Firefox, Chrome and Opera (buggy), Safari (for real exceptions)\r\n// Later Safari and IE10 are supposed to support error.stack as well\r\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\r\n  function extractStacktrace(e, offset) {\r\n    offset = offset === undefined ? 3 : offset;\r\n\r\n    var stack, include, i, regex;\r\n\r\n    if (e.stacktrace) {\r\n      // Opera\r\n      return e.stacktrace.split(\"\\n\")[ offset + 3 ];\r\n    } else if (e.stack) {\r\n      // Firefox, Chrome\r\n      stack = e.stack.split(\"\\n\");\r\n      if (/^error$/i.test(stack[0])) {\r\n        stack.shift();\r\n      }\r\n      if (fileName) {\r\n        include = [];\r\n        for (i = offset; i < stack.length; i++) {\r\n          if (stack[ i ].indexOf(fileName) != -1) {\r\n            break;\r\n          }\r\n          include.push(stack[ i ]);\r\n        }\r\n        if (include.length) {\r\n          return include.join(\"\\n\");\r\n        }\r\n      }\r\n      return stack[ offset ];\r\n    } else if (e.sourceURL) {\r\n      // Safari, PhantomJS\r\n      // hopefully one day Safari provides actual stacktraces\r\n      // exclude useless self-reference for generated Error objects\r\n      if (/qunit.js$/.test(e.sourceURL)) {\r\n        return;\r\n      }\r\n      // for actual exceptions, this is useful\r\n      return e.sourceURL + \":\" + e.line;\r\n    }\r\n  }\r\n\r\n  function sourceFromStacktrace(offset) {\r\n    try {\r\n      throw new Error();\r\n    } catch (e) {\r\n      return extractStacktrace(e, offset);\r\n    }\r\n  }\r\n\r\n  function escapeInnerText(s) {\r\n    if (!s) {\r\n      return \"\";\r\n    }\r\n    s = s + \"\";\r\n    return s.replace(/[\\&<>]/g, function (s) {\r\n      switch (s) {\r\n        case \"&\":\r\n          return \"&amp;\";\r\n        case \"<\":\r\n          return \"&lt;\";\r\n        case \">\":\r\n          return \"&gt;\";\r\n        default:\r\n          return s;\r\n      }\r\n    });\r\n  }\r\n\r\n  function synchronize(callback, last) {\r\n    config.queue.push(callback);\r\n\r\n    if (config.autorun && !config.blocking) {\r\n      process(last);\r\n    }\r\n  }\r\n\r\n  function process(last) {\r\n    function next() {\r\n      process(last);\r\n    }\r\n\r\n    var start = new Date().getTime();\r\n    config.depth = config.depth ? config.depth + 1 : 1;\r\n\r\n    while (config.queue.length && !config.blocking) {\r\n      if (!defined.setTimeout || config.updateRate <= 0 || ( ( new Date().getTime() - start ) < config.updateRate )) {\r\n        config.queue.shift()();\r\n      } else {\r\n        window.setTimeout(next, 13);\r\n        break;\r\n      }\r\n    }\r\n    config.depth--;\r\n    if (last && !config.blocking && !config.queue.length && config.depth === 0) {\r\n      done();\r\n    }\r\n  }\r\n\r\n  function saveGlobal() {\r\n    config.pollution = [];\r\n\r\n    if (config.noglobals) {\r\n      for (var key in window) {\r\n        // in Opera sometimes DOM element ids show up here, ignore them\r\n        if (!hasOwn.call(window, key) || /^qunit-test-output/.test(key)) {\r\n          continue;\r\n        }\r\n        config.pollution.push(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkPollution(name) {\r\n    var newGlobals,\r\n        deletedGlobals,\r\n        old = config.pollution;\r\n\r\n    saveGlobal();\r\n\r\n    newGlobals = diff(config.pollution, old);\r\n    if (newGlobals.length > 0) {\r\n      QUnit.pushFailure(\"Introduced global variable(s): \" + newGlobals.join(\", \"));\r\n    }\r\n\r\n    deletedGlobals = diff(old, config.pollution);\r\n    if (deletedGlobals.length > 0) {\r\n      QUnit.pushFailure(\"Deleted global variable(s): \" + deletedGlobals.join(\", \"));\r\n    }\r\n  }\r\n\r\n// returns a new Array with the elements that are in a but not in b\r\n  function diff(a, b) {\r\n    var i, j,\r\n        result = a.slice();\r\n\r\n    for (i = 0; i < result.length; i++) {\r\n      for (j = 0; j < b.length; j++) {\r\n        if (result[i] === b[j]) {\r\n          result.splice(i, 1);\r\n          i--;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function extend(a, b) {\r\n    for (var prop in b) {\r\n      if (b[ prop ] === undefined) {\r\n        delete a[ prop ];\r\n\r\n        // Avoid \"Member not found\" error in IE8 caused by setting window.constructor\r\n      } else if (prop !== \"constructor\" || a !== window) {\r\n        a[ prop ] = b[ prop ];\r\n      }\r\n    }\r\n\r\n    return a;\r\n  }\r\n\r\n  function addEvent(elem, type, fn) {\r\n    if (elem.addEventListener) {\r\n      elem.addEventListener(type, fn, false);\r\n    } else if (elem.attachEvent) {\r\n      elem.attachEvent(\"on\" + type, fn);\r\n    } else {\r\n      fn();\r\n    }\r\n  }\r\n\r\n  function id(name) {\r\n    return !!( typeof document !== \"undefined\" && document && document.getElementById ) &&\r\n        document.getElementById(name);\r\n  }\r\n\r\n  function registerLoggingCallback(key) {\r\n    return function (callback) {\r\n      config[key].push(callback);\r\n    };\r\n  }\r\n\r\n// Supports deprecated method of completely overwriting logging callbacks\r\n  function runLoggingCallbacks(key, scope, args) {\r\n    //debugger;\r\n    var i, callbacks;\r\n    if (QUnit.hasOwnProperty(key)) {\r\n      QUnit[ key ].call(scope, args);\r\n    } else {\r\n      callbacks = config[ key ];\r\n      for (i = 0; i < callbacks.length; i++) {\r\n        callbacks[ i ].call(scope, args);\r\n      }\r\n    }\r\n  }\r\n\r\n// Test for equality any JavaScript type.\r\n// Author: Philippe Rathé <prathe@gmail.com>\r\n  QUnit.equiv = (function () {\r\n\r\n    // Call the o related callback with the given arguments.\r\n    function bindCallbacks(o, callbacks, args) {\r\n      var prop = QUnit.objectType(o);\r\n      if (prop) {\r\n        if (QUnit.objectType(callbacks[ prop ]) === \"function\") {\r\n          return callbacks[ prop ].apply(callbacks, args);\r\n        } else {\r\n          return callbacks[ prop ]; // or undefined\r\n        }\r\n      }\r\n    }\r\n\r\n    // the real equiv function\r\n    var innerEquiv,\r\n    // stack to decide between skip/abort functions\r\n        callers = [],\r\n    // stack to avoiding loops from circular referencing\r\n        parents = [],\r\n\r\n        getProto = Object.getPrototypeOf || function (obj) {\r\n          return obj.__proto__;\r\n        },\r\n        callbacks = (function () {\r\n\r\n          // for string, boolean, number and null\r\n          function useStrictEquality(b, a) {\r\n            if (b instanceof a.constructor || a instanceof b.constructor) {\r\n              // to catch short annotaion VS 'new' annotation of a\r\n              // declaration\r\n              // e.g. var i = 1;\r\n              // var j = new Number(1);\r\n              return a == b;\r\n            } else {\r\n              return a === b;\r\n            }\r\n          }\r\n\r\n          return {\r\n            \"string\": useStrictEquality,\r\n            \"boolean\": useStrictEquality,\r\n            \"number\": useStrictEquality,\r\n            \"null\": useStrictEquality,\r\n            \"undefined\": useStrictEquality,\r\n\r\n            \"nan\": function (b) {\r\n              return isNaN(b);\r\n            },\r\n\r\n            \"date\": function (b, a) {\r\n              return QUnit.objectType(b) === \"date\" && a.valueOf() === b.valueOf();\r\n            },\r\n\r\n            \"regexp\": function (b, a) {\r\n              return QUnit.objectType(b) === \"regexp\" &&\r\n                // the regex itself\r\n                  a.source === b.source &&\r\n                // and its modifers\r\n                  a.global === b.global &&\r\n                // (gmi) ...\r\n                  a.ignoreCase === b.ignoreCase &&\r\n                  a.multiline === b.multiline &&\r\n                  a.sticky === b.sticky;\r\n            },\r\n\r\n            // - skip when the property is a method of an instance (OOP)\r\n            // - abort otherwise,\r\n            // initial === would have catch identical references anyway\r\n            \"function\": function () {\r\n              var caller = callers[callers.length - 1];\r\n              return caller !== Object && typeof caller !== \"undefined\";\r\n            },\r\n\r\n            \"array\": function (b, a) {\r\n              var i, j, len, loop;\r\n\r\n              // b could be an object literal here\r\n              if (QUnit.objectType(b) !== \"array\") {\r\n                return false;\r\n              }\r\n\r\n              len = a.length;\r\n              if (len !== b.length) {\r\n                // safe and faster\r\n                return false;\r\n              }\r\n\r\n              // track reference to avoid circular references\r\n              parents.push(a);\r\n              for (i = 0; i < len; i++) {\r\n                loop = false;\r\n                for (j = 0; j < parents.length; j++) {\r\n                  if (parents[j] === a[i]) {\r\n                    loop = true;// dont rewalk array\r\n                  }\r\n                }\r\n                if (!loop && !innerEquiv(a[i], b[i])) {\r\n                  parents.pop();\r\n                  return false;\r\n                }\r\n              }\r\n              parents.pop();\r\n              return true;\r\n            },\r\n\r\n            \"object\": function (b, a) {\r\n              var i, j, loop,\r\n              // Default to true\r\n                  eq = true,\r\n                  aProperties = [],\r\n                  bProperties = [];\r\n\r\n              // comparing constructors is more strict than using\r\n              // instanceof\r\n              if (a.constructor !== b.constructor) {\r\n                // Allow objects with no prototype to be equivalent to\r\n                // objects with Object as their constructor.\r\n                if (!(( getProto(a) === null && getProto(b) === Object.prototype ) ||\r\n                    ( getProto(b) === null && getProto(a) === Object.prototype ) )) {\r\n                  return false;\r\n                }\r\n              }\r\n\r\n              // stack constructor before traversing properties\r\n              callers.push(a.constructor);\r\n              // track reference to avoid circular references\r\n              parents.push(a);\r\n\r\n              for (i in a) { // be strict: don't ensures hasOwnProperty\r\n                // and go deep\r\n                loop = false;\r\n                for (j = 0; j < parents.length; j++) {\r\n                  if (parents[j] === a[i]) {\r\n                    // don't go down the same path twice\r\n                    loop = true;\r\n                  }\r\n                }\r\n                aProperties.push(i); // collect a's properties\r\n\r\n                if (!loop && !innerEquiv(a[i], b[i])) {\r\n                  eq = false;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              callers.pop(); // unstack, we are done\r\n              parents.pop();\r\n\r\n              for (i in b) {\r\n                bProperties.push(i); // collect b's properties\r\n              }\r\n\r\n              // Ensures identical properties name\r\n              return eq && innerEquiv(aProperties.sort(), bProperties.sort());\r\n            }\r\n          };\r\n        }());\r\n\r\n    innerEquiv = function () { // can take multiple arguments\r\n      var args = [].slice.apply(arguments);\r\n      if (args.length < 2) {\r\n        return true; // end transition\r\n      }\r\n\r\n      return (function (a, b) {\r\n        if (a === b) {\r\n          return true; // catch the most you can\r\n        } else if (a === null || b === null || typeof a === \"undefined\" ||\r\n            typeof b === \"undefined\" ||\r\n            QUnit.objectType(a) !== QUnit.objectType(b)) {\r\n          return false; // don't lose time with error prone cases\r\n        } else {\r\n          return bindCallbacks(a, callbacks, [ b, a ]);\r\n        }\r\n\r\n        // apply transition with (1..n) arguments\r\n      }(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length - 1)) );\r\n    };\r\n\r\n    return innerEquiv;\r\n  }());\r\n\r\n  /**\r\n   * jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\r\n   * http://flesler.blogspot.com Licensed under BSD\r\n   * (http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008\r\n   *\r\n   * @projectDescription Advanced and extensible data dumping for Javascript.\r\n   * @version 1.0.0\r\n   * @author Ariel Flesler\r\n   * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}\r\n   */\r\n  QUnit.jsDump = (function () {\r\n    function quote(str) {\r\n      return '\"' + str.toString().replace(/\"/g, '\\\\\"') + '\"';\r\n    }\r\n\r\n    function literal(o) {\r\n      return o + \"\";\r\n    }\r\n\r\n    function join(pre, arr, post) {\r\n      var s = jsDump.separator(),\r\n          base = jsDump.indent(),\r\n          inner = jsDump.indent(1);\r\n      if (arr.join) {\r\n        arr = arr.join(\",\" + s + inner);\r\n      }\r\n      if (!arr) {\r\n        return pre + post;\r\n      }\r\n      return [ pre, inner + arr, base + post ].join(s);\r\n    }\r\n\r\n    function array(arr, stack) {\r\n      var i = arr.length, ret = new Array(i);\r\n      this.up();\r\n      while (i--) {\r\n        ret[i] = this.parse(arr[i], undefined, stack);\r\n      }\r\n      this.down();\r\n      return join(\"[\", ret, \"]\");\r\n    }\r\n\r\n    var reName = /^function (\\w+)/,\r\n        jsDump = {\r\n          parse: function (obj, type, stack) { //type is used mostly internally, you can fix a (custom)type in advance\r\n            stack = stack || [ ];\r\n            var inStack, res,\r\n                parser = this.parsers[ type || this.typeOf(obj) ];\r\n\r\n            type = typeof parser;\r\n            inStack = inArray(obj, stack);\r\n\r\n            if (inStack != -1) {\r\n              return \"recursion(\" + (inStack - stack.length) + \")\";\r\n            }\r\n            //else\r\n            if (type == \"function\") {\r\n              stack.push(obj);\r\n              res = parser.call(this, obj, stack);\r\n              stack.pop();\r\n              return res;\r\n            }\r\n            // else\r\n            return ( type == \"string\" ) ? parser : this.parsers.error;\r\n          },\r\n          typeOf: function (obj) {\r\n            var type;\r\n            if (obj === null) {\r\n              type = \"null\";\r\n            } else if (typeof obj === \"undefined\") {\r\n              type = \"undefined\";\r\n            } else if (QUnit.is(\"regexp\", obj)) {\r\n              type = \"regexp\";\r\n            } else if (QUnit.is(\"date\", obj)) {\r\n              type = \"date\";\r\n            } else if (QUnit.is(\"function\", obj)) {\r\n              type = \"function\";\r\n            } else if (typeof obj.setInterval !== undefined && typeof obj.document !== \"undefined\" && typeof obj.nodeType === \"undefined\") {\r\n              type = \"window\";\r\n            } else if (obj.nodeType === 9) {\r\n              type = \"document\";\r\n            } else if (obj.nodeType) {\r\n              type = \"node\";\r\n            } else if (\r\n            // native arrays\r\n                toString.call(obj) === \"[object Array]\" ||\r\n                  // NodeList objects\r\n                    ( typeof obj.length === \"number\" && typeof obj.item !== \"undefined\" && ( obj.length ? obj.item(0) === obj[0] : ( obj.item(0) === null && typeof obj[0] === \"undefined\" ) ) )\r\n                ) {\r\n              type = \"array\";\r\n            } else {\r\n              type = typeof obj;\r\n            }\r\n            return type;\r\n          },\r\n          separator: function () {\r\n            return this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&nbsp;\" : \" \";\r\n          },\r\n          indent: function (extra) {// extra can be a number, shortcut for increasing-calling-decreasing\r\n            if (!this.multiline) {\r\n              return \"\";\r\n            }\r\n            var chr = this.indentChar;\r\n            if (this.HTML) {\r\n              chr = chr.replace(/\\t/g, \"   \").replace(/ /g, \"&nbsp;\");\r\n            }\r\n            return new Array(this._depth_ + (extra || 0)).join(chr);\r\n          },\r\n          up: function (a) {\r\n            this._depth_ += a || 1;\r\n          },\r\n          down: function (a) {\r\n            this._depth_ -= a || 1;\r\n          },\r\n          setParser: function (name, parser) {\r\n            this.parsers[name] = parser;\r\n          },\r\n          // The next 3 are exposed so you can use them\r\n          quote: quote,\r\n          literal: literal,\r\n          join: join,\r\n          //\r\n          _depth_: 1,\r\n          // This is the list of parsers, to modify them, use jsDump.setParser\r\n          parsers: {\r\n            window: \"[Window]\",\r\n            document: \"[Document]\",\r\n            error: \"[ERROR]\", //when no parser is found, shouldn\"t happen\r\n            unknown: \"[Unknown]\",\r\n            \"null\": \"null\",\r\n            \"undefined\": \"undefined\",\r\n            \"function\": function (fn) {\r\n              var ret = \"function\",\r\n                  name = \"name\" in fn ? fn.name : (reName.exec(fn) || [])[1];//functions never have name in IE\r\n\r\n              if (name) {\r\n                ret += \" \" + name;\r\n              }\r\n              ret += \"( \";\r\n\r\n              ret = [ ret, QUnit.jsDump.parse(fn, \"functionArgs\"), \"){\" ].join(\"\");\r\n              return join(ret, QUnit.jsDump.parse(fn, \"functionCode\"), \"}\");\r\n            },\r\n            array: array,\r\n            nodelist: array,\r\n            \"arguments\": array,\r\n            object: function (map, stack) {\r\n              var ret = [ ], keys, key, val, i;\r\n              QUnit.jsDump.up();\r\n              if (Object.keys) {\r\n                keys = Object.keys(map);\r\n              } else {\r\n                keys = [];\r\n                for (key in map) {\r\n                  keys.push(key);\r\n                }\r\n              }\r\n              keys.sort();\r\n              for (i = 0; i < keys.length; i++) {\r\n                key = keys[ i ];\r\n                val = map[ key ];\r\n                ret.push(QUnit.jsDump.parse(key, \"key\") + \": \" + QUnit.jsDump.parse(val, undefined, stack));\r\n              }\r\n              QUnit.jsDump.down();\r\n              return join(\"{\", ret, \"}\");\r\n            },\r\n            node: function (node) {\r\n              var a, val,\r\n                  open = QUnit.jsDump.HTML ? \"&lt;\" : \"<\",\r\n                  close = QUnit.jsDump.HTML ? \"&gt;\" : \">\",\r\n                  tag = node.nodeName.toLowerCase(),\r\n                  ret = open + tag;\r\n\r\n              for (a in QUnit.jsDump.DOMAttrs) {\r\n                val = node[ QUnit.jsDump.DOMAttrs[a] ];\r\n                if (val) {\r\n                  ret += \" \" + a + \"=\" + QUnit.jsDump.parse(val, \"attribute\");\r\n                }\r\n              }\r\n              return ret + close + open + \"/\" + tag + close;\r\n            },\r\n            functionArgs: function (fn) {//function calls it internally, it's the arguments part of the function\r\n              var args,\r\n                  l = fn.length;\r\n\r\n              if (!l) {\r\n                return \"\";\r\n              }\r\n\r\n              args = new Array(l);\r\n              while (l--) {\r\n                args[l] = String.fromCharCode(97 + l);//97 is 'a'\r\n              }\r\n              return \" \" + args.join(\", \") + \" \";\r\n            },\r\n            key: quote, //object calls it internally, the key part of an item in a map\r\n            functionCode: \"[code]\", //function calls it internally, it's the content of the function\r\n            attribute: quote, //node calls it internally, it's an html attribute value\r\n            string: quote,\r\n            date: quote,\r\n            regexp: literal, //regex\r\n            number: literal,\r\n            \"boolean\": literal\r\n          },\r\n          DOMAttrs: {\r\n            //attributes to dump from nodes, name=>realName\r\n            id: \"id\",\r\n            name: \"name\",\r\n            \"class\": \"className\"\r\n          },\r\n          HTML: false,//if true, entities are escaped ( <, >, \\t, space and \\n )\r\n          indentChar: \"  \",//indentation unit\r\n          multiline: true //if true, items in a collection, are separated by a \\n, else just a space.\r\n        };\r\n\r\n    return jsDump;\r\n  }());\r\n\r\n// from Sizzle.js\r\n  function getText(elems) {\r\n    var i, elem,\r\n        ret = \"\";\r\n\r\n    for (i = 0; elems[i]; i++) {\r\n      elem = elems[i];\r\n\r\n      // Get the text from text nodes and CDATA nodes\r\n      if (elem.nodeType === 3 || elem.nodeType === 4) {\r\n        ret += elem.nodeValue;\r\n\r\n        // Traverse everything else, except comment nodes\r\n      } else if (elem.nodeType !== 8) {\r\n        ret += getText(elem.childNodes);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n// from jquery.js\r\n  function inArray(elem, array) {\r\n    if (array.indexOf) {\r\n      return array.indexOf(elem);\r\n    }\r\n\r\n    for (var i = 0, length = array.length; i < length; i++) {\r\n      if (array[ i ] === elem) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /*\r\n   * Javascript Diff Algorithm\r\n   *  By John Resig (http://ejohn.org/)\r\n   *  Modified by Chu Alan \"sprite\"\r\n   *\r\n   * Released under the MIT license.\r\n   *\r\n   * More Info:\r\n   *  http://ejohn.org/projects/javascript-diff-algorithm/\r\n   *\r\n   * Usage: QUnit.diff(expected, actual)\r\n   *\r\n   * QUnit.diff( \"the quick brown fox jumped over\", \"the quick fox jumps over\" ) == \"the  quick <del>brown </del> fox <del>jumped </del><ins>jumps </ins> over\"\r\n   */\r\n  QUnit.diff = (function () {\r\n    function diff(o, n) {\r\n      var i,\r\n          ns = {},\r\n          os = {};\r\n\r\n      for (i = 0; i < n.length; i++) {\r\n        if (ns[ n[i] ] == null) {\r\n          ns[ n[i] ] = {\r\n            rows: [],\r\n            o: null\r\n          };\r\n        }\r\n        ns[ n[i] ].rows.push(i);\r\n      }\r\n\r\n      for (i = 0; i < o.length; i++) {\r\n        if (os[ o[i] ] == null) {\r\n          os[ o[i] ] = {\r\n            rows: [],\r\n            n: null\r\n          };\r\n        }\r\n        os[ o[i] ].rows.push(i);\r\n      }\r\n\r\n      for (i in ns) {\r\n        if (!hasOwn.call(ns, i)) {\r\n          continue;\r\n        }\r\n        if (ns[i].rows.length == 1 && typeof os[i] != \"undefined\" && os[i].rows.length == 1) {\r\n          n[ ns[i].rows[0] ] = {\r\n            text: n[ ns[i].rows[0] ],\r\n            row: os[i].rows[0]\r\n          };\r\n          o[ os[i].rows[0] ] = {\r\n            text: o[ os[i].rows[0] ],\r\n            row: ns[i].rows[0]\r\n          };\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < n.length - 1; i++) {\r\n        if (n[i].text != null && n[ i + 1 ].text == null && n[i].row + 1 < o.length && o[ n[i].row + 1 ].text == null &&\r\n            n[ i + 1 ] == o[ n[i].row + 1 ]) {\r\n\r\n          n[ i + 1 ] = {\r\n            text: n[ i + 1 ],\r\n            row: n[i].row + 1\r\n          };\r\n          o[ n[i].row + 1 ] = {\r\n            text: o[ n[i].row + 1 ],\r\n            row: i + 1\r\n          };\r\n        }\r\n      }\r\n\r\n      for (i = n.length - 1; i > 0; i--) {\r\n        if (n[i].text != null && n[ i - 1 ].text == null && n[i].row > 0 && o[ n[i].row - 1 ].text == null &&\r\n            n[ i - 1 ] == o[ n[i].row - 1 ]) {\r\n\r\n          n[ i - 1 ] = {\r\n            text: n[ i - 1 ],\r\n            row: n[i].row - 1\r\n          };\r\n          o[ n[i].row - 1 ] = {\r\n            text: o[ n[i].row - 1 ],\r\n            row: i - 1\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        o: o,\r\n        n: n\r\n      };\r\n    }\r\n\r\n    return function (o, n) {\r\n      o = o.replace(/\\s+$/, \"\");\r\n      n = n.replace(/\\s+$/, \"\");\r\n\r\n      var i, pre,\r\n          str = \"\",\r\n          out = diff(o === \"\" ? [] : o.split(/\\s+/), n === \"\" ? [] : n.split(/\\s+/)),\r\n          oSpace = o.match(/\\s+/g),\r\n          nSpace = n.match(/\\s+/g);\r\n\r\n      if (oSpace == null) {\r\n        oSpace = [ \" \" ];\r\n      }\r\n      else {\r\n        oSpace.push(\" \");\r\n      }\r\n\r\n      if (nSpace == null) {\r\n        nSpace = [ \" \" ];\r\n      }\r\n      else {\r\n        nSpace.push(\" \");\r\n      }\r\n\r\n      if (out.n.length === 0) {\r\n        for (i = 0; i < out.o.length; i++) {\r\n          str += \"<del>\" + out.o[i] + oSpace[i] + \"</del>\";\r\n        }\r\n      }\r\n      else {\r\n        if (out.n[0].text == null) {\r\n          for (n = 0; n < out.o.length && out.o[n].text == null; n++) {\r\n            str += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\r\n          }\r\n        }\r\n\r\n        for (i = 0; i < out.n.length; i++) {\r\n          if (out.n[i].text == null) {\r\n            str += \"<ins>\" + out.n[i] + nSpace[i] + \"</ins>\";\r\n          }\r\n          else {\r\n            // `pre` initialized at top of scope\r\n            pre = \"\";\r\n\r\n            for (n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++) {\r\n              pre += \"<del>\" + out.o[n] + oSpace[n] + \"</del>\";\r\n            }\r\n            str += \" \" + out.n[i].text + nSpace[i] + pre;\r\n          }\r\n        }\r\n      }\r\n\r\n      return str;\r\n    };\r\n  }());\r\n\r\n// for CommonJS enviroments, export everything\r\n  if (typeof exports !== \"undefined\") {\r\n    extend(exports, QUnit);\r\n  }\r\n\r\n// get at whatever the global object is, like window in browsers\r\n}());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/webpackShims/qunit-1.10.0.js\n// module id = 3435\n// module chunks = 2","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/webpackShims/qunit-1.10.0.css\n// module id = 3436\n// module chunks = 2","'use strict';\n\nvar _es = require('../../src/es');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    equal = _window$QUnit.equal;\n\n\nvar APPLICATION_JSON = 'application/json';\n\n_module('Content type');\n\ntest('body', function () {\n  var contentType = (0, _es.getContentType)([JSON.stringify({\n    foo: 'baz'\n  }), JSON.stringify({\n    foo: 'bar'\n  })].join('\\n'));\n\n  equal(contentType, APPLICATION_JSON);\n});\n\ntest('no body', function () {\n  var contentType = (0, _es.getContentType)('');\n\n  equal(contentType, undefined);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/content_type.js\n// module id = 3437\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar utils = require('../../src/utils');\nvar collapsingTests = require('raw-loader!./utils_string_collapsing.txt');\nvar expandingTests = require('raw-loader!./utils_string_expanding.txt');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Utils class\");\n\n_.each(collapsingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      expanded = fixture[1].trim(),\n      collapsed = fixture[2].trim();\n\n  test(\"Literal collapse - \" + name, function () {\n    deepEqual(utils.collapseLiteralStrings(expanded), collapsed);\n  });\n});\n\n_.each(expandingTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      collapsed = fixture[1].trim(),\n      expanded = fixture[2].trim();\n\n  test(\"Literal expand - \" + name, function () {\n    deepEqual(utils.expandLiteralStrings(collapsed), expanded);\n  });\n\n  test(\"extract deprecation messages\", function () {\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\", 299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a second warning\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning', '#! Deprecation: this is a second warning']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes a comma\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes a comma']);\n    deepEqual(utils.extractDeprecationMessages('299 Elasticsearch-6.0.0-alpha1-SNAPSHOT-abcdef1 \"this is a warning, and it includes an escaped backslash \\\\\\\\ and a pair of \\\\\\\"escaped quotes\\\\\\\"\" \"Mon, 27 Feb 2017 14:52:14 GMT\"'), ['#! Deprecation: this is a warning, and it includes an escaped backslash \\\\ and a pair of \"escaped quotes\"']);\n  });\n\n  test(\"unescape\", function () {\n    deepEqual(utils.unescape('escaped backslash \\\\\\\\'), 'escaped backslash \\\\');\n    deepEqual(utils.unescape('a pair of \\\\\\\"escaped quotes\\\\\\\"'), 'a pair of \"escaped quotes\"');\n    deepEqual(utils.unescape('escaped quotes do not have to come in pairs: \\\\\\\"'), 'escaped quotes do not have to come in pairs: \"');\n  });\n\n  test(\"split on unquoted comma followed by space\", function () {\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b'), ['a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a,b, c'), ['a,b', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\"'), ['\"a, b\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\", c'), ['\"a, b\"', 'c']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\"a, b\\\\\", c\"'), ['\"a, b\\\\\", c\"']);\n    deepEqual(utils.splitOnUnquotedCommaSpace(', a, b'), ['', 'a', 'b']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('a, b, '), ['a', 'b', '']);\n    deepEqual(utils.splitOnUnquotedCommaSpace('\\\\\"a, b\", \"c, d\\\\\", e\", f\"'), ['\\\\\"a', 'b\", \"c', 'd\\\\\"', 'e\", f\"']);\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/utils_tests.js\n// module id = 3438\n// module chunks = 2","module.exports = \"==========\\r\\nString only 1\\r\\n-------------------------------------\\r\\n\\\"\\\"\\\" hello\\r\\nto you \\\"\\\"\\\"\\r\\n-------------------------------------\\r\\n\\\" hello\\\\nto you \\\"\\r\\n==========\\r\\nString only 2\\r\\n-------------------------------------\\r\\n\\\"\\\"\\\" \\r\\nstartning with new lines and ending as well\\r\\n \\\"\\\"\\\"\\r\\n-------------------------------------\\r\\n\\\"startning with new lines and ending as well\\\"\\r\\n==========\\r\\nStrings in requests\\r\\n-------------------------------------\\r\\n{\\r\\n  \\\"f\\\": { \\\"somefield\\\" : \\\"\\\"\\\"\\r\\ntest\\r\\ntest2\\r\\n\\\"\\\"\\\" },\\r\\n  \\\"g\\\": { \\\"script\\\" : \\\"\\\"\\\"second + \\\"\\\\\\\";\\\"\\\"\\\" },\\r\\n  \\\"h\\\": 1,\\r\\n  \\\"script\\\": \\\"a + 2\\\"\\r\\n}\\r\\n-------------------------------------\\r\\n{\\r\\n  \\\"f\\\": { \\\"somefield\\\" : \\\"test\\\\ntest2\\\" },\\r\\n  \\\"g\\\": { \\\"script\\\" : \\\"second + \\\\\\\"\\\\\\\\\\\\\\\";\\\" },\\r\\n  \\\"h\\\": 1,\\r\\n  \\\"script\\\": \\\"a + 2\\\"\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/utils_string_collapsing.txt\n// module id = 3439\n// module chunks = 2","module.exports = \"==========\\r\\nScripts in requests\\r\\n-------------------------------------\\r\\n{\\r\\n  \\\"f\\\": { \\\"script\\\" : { \\\"inline\\\": \\\"test\\\\ntest\\\\\\\\2\\\" } },\\r\\n  \\\"g\\\": { \\\"script\\\" : \\\"second + \\\\\\\"\\\\\\\\\\\\\\\";\\\" },\\r\\n  \\\"f\\\": \\\"short with \\\\\\\\\\\",\\r\\n  \\\"h\\\": 1,\\r\\n  \\\"script\\\": \\\"a + 2\\\"\\r\\n}\\r\\n-------------------------------------\\r\\n{\\r\\n  \\\"f\\\": { \\\"script\\\" : { \\\"inline\\\": \\\"\\\"\\\"\\r\\ntest\\r\\ntest\\\\2\\r\\n\\\"\\\"\\\" } },\\r\\n  \\\"g\\\": { \\\"script\\\" : \\\"\\\"\\\"second + \\\"\\\\\\\";\\\"\\\"\\\" },\\r\\n  \\\"f\\\": \\\"short with \\\\\\\\\\\",\\r\\n  \\\"h\\\": 1,\\r\\n  \\\"script\\\": \\\"a + 2\\\"\\r\\n}\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/utils_string_expanding.txt\n// module id = 3440\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar url_pattern_matcher = require('../../src/autocomplete/url_pattern_matcher');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url autocomplete\");\n\nfunction patterns_test(name, endpoints, tokenPath, expectedContext, globalUrlComponentFactories) {\n\n  test(name, function () {\n    var patternMatcher = new url_pattern_matcher.UrlPatternMatcher(globalUrlComponentFactories);\n    _.each(endpoints, function (e, id) {\n      e.id = id;\n      _.each(e.patterns, function (p) {\n        patternMatcher.addEndpoint(p, e);\n      });\n    });\n    if (typeof tokenPath === \"string\") {\n      if (tokenPath[tokenPath.length - 1] == \"$\") {\n        tokenPath = tokenPath.substr(0, tokenPath.length - 1) + \"/\" + url_pattern_matcher.URL_PATH_END_MARKER;\n      }\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n    if (expectedContext.method) {\n      context.method = expectedContext.method;\n    }\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, patternMatcher.getTopLevelComponents());\n\n    // override context to just check on id\n    if (context.endpoint) {\n      context.endpoint = context.endpoint.id;\n    }\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta) {\n  if (meta) {\n    return { name: name, meta: meta };\n  }\n  return name;\n}\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\"]\n    }\n  };\n  patterns_test(\"simple single path - completion\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"simple single path - completion, with auto complete\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"simple single path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"simple single path - partial, with auto complete\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"simple single path - different path\", endpoints, \"a/c\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b\", \"a/b/{p}\"]\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"shared path  - completion 1\", endpoints, \"a/b$\", { endpoint: \"1\" });\n\n  patterns_test(\"shared path  - completion 2\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"shared path  - completion 1 with param\", endpoints, \"a/b/v$\", { endpoint: \"1\", p: \"v\" });\n\n  patterns_test(\"shared path - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [\"b\", \"c\"] });\n\n  patterns_test(\"shared path - partial, with auto complete of param, no options\", endpoints, \"a/b\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"shared path - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n\n  patterns_test(\"shared path - different path - without auto complete\", endpoints, \"a/e\", {});\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"a/c\"]\n    }\n  };\n  patterns_test(\"option testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] });\n\n  patterns_test(\"option testing - completion 2\", endpoints, \"a/b$\", { endpoint: \"1\", p: [\"b\"] });\n\n  patterns_test(\"option testing - completion 3\", endpoints, \"a/b,a$\", { endpoint: \"1\", p: [\"b\", \"a\"] });\n\n  patterns_test(\"option testing - completion 4\", endpoints, \"a/c$\", { endpoint: \"2\" });\n\n  patterns_test(\"option testing  - completion 5\", endpoints, \"a/d$\", {});\n\n  patterns_test(\"option testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\"), \"c\"] });\n\n  patterns_test(\"option testing - partial, without auto complete\", endpoints, \"a\", {});\n\n  patterns_test(\"option testing - different path - with auto complete\", endpoints, \"a/e\", { autoCompleteSet: [] });\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/{p}\"],\n      url_components: {\n        p: [\"a\", \"b\"]\n      }\n    },\n    \"2\": {\n      patterns: [\"b/{p}\"]\n    },\n    \"3\": {\n      patterns: [\"b/{l}/c\"],\n      url_components: {\n        l: {\n          type: \"list\",\n          list: [\"la\", \"lb\"],\n          allow_non_valid: true\n        }\n      }\n    }\n  };\n  var globalFactories = {\n    \"p\": function p(name, parent) {\n      return new autocomplete_engine.ListComponent(name, [\"g1\", \"g2\"], parent);\n    }\n  };\n\n  patterns_test(\"global parameters testing - completion 1\", endpoints, \"a/a$\", { endpoint: \"1\", p: [\"a\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - completion 2\", endpoints, \"b/g1$\", { endpoint: \"2\", p: [\"g1\"] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete\", endpoints, \"a\", { autoCompleteSet: [t(\"a\", \"p\"), t(\"b\", \"p\")] }, globalFactories);\n\n  patterns_test(\"global parameters testing - partial, with auto complete 2\", endpoints, \"b\", { autoCompleteSet: [t(\"g1\", \"p\"), t(\"g2\", \"p\"), t(\"la\", \"l\"), t(\"lb\", \"l\")] }, globalFactories);\n\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 1\", endpoints, \"b/la\", { autoCompleteSet: [\"c\"], \"l\": [\"la\"] }, globalFactories);\n  patterns_test(\"Non valid token acceptance - partial, with auto complete 2\", endpoints, \"b/non_valid\", { autoCompleteSet: [\"c\"], \"l\": [\"non_valid\"] }, globalFactories);\n})();\n\n(function () {\n  var endpoints = {\n    \"1\": {\n      patterns: [\"a/b/{p}/c/e\"]\n    }\n  };\n  patterns_test(\"look ahead - autocomplete before param 1\", endpoints, \"a\", { autoCompleteSet: [\"b\"] });\n\n  patterns_test(\"look ahead - autocomplete before param 2\", endpoints, [], { autoCompleteSet: [\"a/b\"] });\n\n  patterns_test(\"look ahead - autocomplete after param 1\", endpoints, \"a/b/v\", { autoCompleteSet: [\"c/e\"], \"p\": \"v\" });\n\n  patterns_test(\"look ahead - autocomplete after param 2\", endpoints, \"a/b/v/c\", { autoCompleteSet: [\"e\"], \"p\": \"v\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_param\": {\n      patterns: [\"a/{p}\"],\n      methods: [\"GET\"]\n    },\n    \"2_explicit\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    }\n  };\n\n  var e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  patterns_test(\"Competing endpoints - priority 1\", e, \"a/b$\", { method: \"GET\", endpoint: \"1_param\", \"p\": \"b\" });\n  e = _.cloneDeep(endpoints);\n  e[\"1_param\"].priority = 1;\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 2\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n\n  e = _.cloneDeep(endpoints);\n  e[\"2_explicit\"].priority = 0;\n  patterns_test(\"Competing endpoints - priority 3\", e, \"a/b$\", { method: \"GET\", endpoint: \"2_explicit\" });\n})();\n\n(function () {\n  var endpoints = {\n    \"1_GET\": {\n      patterns: [\"a\"],\n      methods: [\"GET\"]\n    },\n    \"1_PUT\": {\n      patterns: [\"a\"],\n      methods: [\"PUT\"]\n    },\n    \"2_GET\": {\n      patterns: [\"a/b\"],\n      methods: [\"GET\"]\n    },\n    \"2_DELETE\": {\n      patterns: [\"a/b\"],\n      methods: [\"DELETE\"]\n    }\n  };\n  patterns_test(\"Competing endpoint - sub url of another - auto complete\", endpoints, \"a\", { method: \"GET\", autoCompleteSet: [\"b\"] });\n  patterns_test(\"Competing endpoint - sub url of another, complete 1\", endpoints, \"a$\", { method: \"GET\", endpoint: \"1_GET\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 2\", endpoints, \"a$\", { method: \"PUT\", endpoint: \"1_PUT\" });\n  patterns_test(\"Competing endpoint - sub url of another, complete 3\", endpoints, \"a$\", { method: \"DELETE\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1, auto complete\", endpoints, \"a/b$\", { method: \"PUT\", autoCompleteSet: [] });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"GET\", endpoint: \"2_GET\" });\n\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"DELETE\", endpoint: \"2_DELETE\" });\n  patterns_test(\"Competing endpoint - extension of another, complete 1\", endpoints, \"a/b$\", { method: \"PUT\" });\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/url_autocomplete_tests.js\n// module id = 3441\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar url_params = require('../../src/autocomplete/url_params');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Url params\");\n\nfunction param_test(name, description, tokenPath, expectedContext, globalParams) {\n\n  test(name, function () {\n    var urlParams = new url_params.UrlParams(description, globalParams || {});\n    if (typeof tokenPath === \"string\") {\n      tokenPath = _.map(tokenPath.split(\"/\"), function (p) {\n        p = p.split(\",\");\n        if (p.length === 1) {\n          return p[0];\n        }\n        return p;\n      });\n    }\n\n    if (expectedContext.autoCompleteSet) {\n      expectedContext.autoCompleteSet = _.map(expectedContext.autoCompleteSet, function (t) {\n        if (_.isString(t)) {\n          t = { name: t };\n        }\n        return t;\n      });\n      expectedContext.autoCompleteSet = _.sortBy(expectedContext.autoCompleteSet, 'name');\n    }\n\n    var context = {};\n\n    autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, urlParams.getTopLevelComponents());\n\n    if (context.autoCompleteSet) {\n      context.autoCompleteSet = _.sortBy(context.autoCompleteSet, 'name');\n    }\n\n    deepEqual(context, expectedContext);\n  });\n}\n\nfunction t(name, meta, insert_value) {\n  var r = name;\n  if (meta) {\n    r = { name: name, meta: meta };\n    if (meta === \"param\" && !insert_value) {\n      insert_value = name + \"=\";\n    }\n  }\n  if (insert_value) {\n    if (_.isString(r)) {\n      r = { name: name };\n    }\n    r.insert_value = insert_value;\n  }\n  return r;\n}\n\n(function () {\n  var params = {\n    \"a\": [\"1\", \"2\"],\n    \"b\": \"__flag__\"\n  };\n  param_test(\"settings params\", params, \"a/1\", { \"a\": [\"1\"] });\n\n  param_test(\"autocomplete top level\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\")] });\n\n  param_test(\"autocomplete top level, with defaults\", params, [], { autoCompleteSet: [t(\"a\", \"param\"), t(\"b\", \"flag\"), t(\"c\", \"param\")] }, {\n    \"c\": [2]\n  });\n\n  param_test(\"autocomplete values\", params, \"a\", { autoCompleteSet: [t(\"1\", \"a\"), t(\"2\", \"a\")] });\n\n  param_test(\"autocomplete values flag\", params, \"b\", { autoCompleteSet: [t(\"true\", \"b\"), t(\"false\", \"b\")] });\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/url_params_tests.js\n// module id = 3442\n// module chunks = 2","'use strict';\n\nvar _ = require('lodash');\nvar curl = require('../../src/curl');\nvar curlTests = require('raw-loader!./curl_parsing_tests.txt');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    ok = _window$QUnit.ok,\n    equal = _window$QUnit.equal;\n\n\n_module(\"CURL\");\n\nvar notCURLS = ['sldhfsljfhs', 's;kdjfsldkfj curl -XDELETE \"\"', '{ \"hello\": 1 }'];\n\n_.each(notCURLS, function (notCURL, i) {\n  test(\"cURL Detection - broken strings \" + i, function () {\n    ok(!curl.detectCURL(notCURL), \"marked as curl while it wasn't:\" + notCURL);\n  });\n});\n\n_.each(curlTests.split(/^=+$/m), function (fixture) {\n  if (fixture.trim() == \"\") {\n    return;\n  }\n  fixture = fixture.split(/^-+$/m);\n  var name = fixture[0].trim(),\n      curlText = fixture[1],\n      response = fixture[2].trim();\n\n  test(\"cURL Detection - \" + name, function () {\n    ok(curl.detectCURL(curlText), \"marked as not curl while it was:\" + curlText);\n    var r = curl.parseCURL(curlText);\n    equal(r, response);\n  });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/curl_parsing_tests.js\n// module id = 3443\n// module chunks = 2","module.exports = \"==========\\r\\nCurl 1\\r\\n-------------------------------------\\r\\ncurl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{\\r\\n  \\\"user\\\" : \\\"kimchy\\\",\\r\\n  \\\"post_date\\\" : \\\"2009-11-15T14:12:12\\\",\\r\\n  \\\"message\\\" : \\\"trying out Elastic Search\\\"\\r\\n}'\\r\\n-------------------------------------\\r\\nPUT /twitter/tweet/1\\r\\n{\\r\\n  \\\"user\\\" : \\\"kimchy\\\",\\r\\n  \\\"post_date\\\" : \\\"2009-11-15T14:12:12\\\",\\r\\n  \\\"message\\\" : \\\"trying out Elastic Search\\\"\\r\\n}\\r\\n==========\\r\\nCurl 2\\r\\n-------------------------------------\\r\\ncurl -XGET \\\"localhost/twitter/tweet/1?version=2\\\" -d '{\\r\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\r\\n}'\\r\\n-------------------------------------\\r\\nGET /twitter/tweet/1?version=2\\r\\n{\\r\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\r\\n}\\r\\n===========\\r\\nCurl 3\\r\\n-------------------------------------\\r\\ncurl -XPOST https://localhost/twitter/tweet/1?version=2 -d '{\\r\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\r\\n}'\\r\\n-------------------------------------\\r\\nPOST /twitter/tweet/1?version=2\\r\\n{\\r\\n   \\\"message\\\" : \\\"elasticsearch now has versioning support, double cool!\\\"\\r\\n}\\r\\n=========\\r\\nCurl 4\\r\\n-------------------------------------\\r\\ncurl -XPOST https://localhost/twitter\\r\\n-------------------------------------\\r\\nPOST /twitter\\r\\n==========\\r\\nCurl 5\\r\\n-------------------------------------\\r\\ncurl -X POST https://localhost/twitter/\\r\\n-------------------------------------\\r\\nPOST /twitter/\\r\\n=============\\r\\nCurl 6\\r\\n-------------------------------------\\r\\ncurl -s -XPOST localhost:9200/missing-test -d'\\r\\n{\\r\\n  \\\"mappings\\\": {\\r\\n  }\\r\\n}'\\r\\n-------------------------------------\\r\\nPOST /missing-test\\r\\n{\\r\\n  \\\"mappings\\\": {\\r\\n  }\\r\\n}\\r\\n=========================\\r\\nCurl 7\\r\\n-------------------------------------\\r\\ncurl 'localhost:9200/missing-test/doc/_search?pretty' -d'\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  },\\r\\n}'\\r\\n-------------------------------------\\r\\nGET /missing-test/doc/_search?pretty\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  },\\r\\n}\\r\\n===========================\\r\\nCurl 8\\r\\n-------------------------------------\\r\\ncurl localhost:9200/ -d'\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  }\\r\\n}'\\r\\n-------------------------------------\\r\\nGET /\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  }\\r\\n}\\r\\n====================================\\r\\nCurl Script\\r\\n-------------------------------------\\r\\n#!bin/sh\\r\\n\\r\\n// test something\\r\\ncurl 'localhost:9200/missing-test/doc/_search?pretty' -d'\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  },\\r\\n}'\\r\\n\\r\\n\\r\\ncurl -XPOST https://localhost/twitter\\r\\n\\r\\n#someother comments\\r\\ncurl localhost:9200/ -d'\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  }\\r\\n}'\\r\\n\\r\\n\\r\\n-------------------\\r\\n# test something\\r\\nGET /missing-test/doc/_search?pretty\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  },\\r\\n}\\r\\n\\r\\nPOST /twitter\\r\\n\\r\\n#someother comments\\r\\nGET /\\r\\n{\\r\\n  \\\"query\\\": {\\r\\n  }\\r\\n}\\r\\n====================================\\r\\nCurl with some text\\r\\n-------------------------------------\\r\\nThis is what I meant:\\r\\n\\r\\ncurl 'localhost:9200/missing-test/doc/_search?'\\r\\n\\r\\nThis, however, does work:\\r\\ncurl 'localhost:9200/missing/doc/_search?'\\r\\n-------------------\\r\\n### This is what I meant:\\r\\n\\r\\nGET /missing-test/doc/_search?\\r\\n\\r\\n### This, however, does work:\\r\\nGET /missing/doc/_search?\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/curl_parsing_tests.txt\n// module id = 3444\n// module chunks = 2","'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar kb = require('../../src/kb');\nvar mappings = require('../../src/mappings');\nvar autocomplete_engine = require('../../src/autocomplete/engine');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Knowledge base\", {\n  setup: function setup() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  },\n  teardown: function teardown() {\n    mappings.clear();\n    kb.setActiveApi(kb._test.loadApisFromJson({}));\n  }\n});\n\nvar MAPPING = {\n  \"index1\": {\n    \"type1.1\": {\n      \"properties\": {\n        \"field1.1.1\": { \"type\": \"string\" },\n        \"field1.1.2\": { \"type\": \"long\" }\n      }\n    },\n    \"type1.2\": {\n      \"properties\": {}\n    }\n  },\n  \"index2\": {\n    \"type2.1\": {\n      \"properties\": {\n        \"field2.1.1\": { \"type\": \"string\" },\n        \"field2.1.2\": { \"type\": \"string\" }\n      }\n    }\n  }\n};\n\nfunction testUrlContext(tokenPath, otherTokenValues, expectedContext) {\n\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.map(expectedContext.autoCompleteSet, function (t) {\n      if (_lodash2.default.isString(t)) {\n        t = { name: t };\n      }\n      return t;\n    });\n  }\n\n  var context = { otherTokenValues: otherTokenValues };\n  autocomplete_engine.populateContext(tokenPath, context, null, expectedContext.autoCompleteSet, kb.getTopLevelUrlCompleteComponents());\n\n  // override context to just check on id\n  if (context.endpoint) {\n    context.endpoint = context.endpoint.id;\n  }\n\n  delete context.otherTokenValues;\n\n  function norm(t) {\n    if (_lodash2.default.isString(t)) {\n      return { name: t };\n    }\n    return t;\n  }\n\n  if (context.autoCompleteSet) {\n    context.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(context.autoCompleteSet, norm), 'name');\n  }\n  if (expectedContext.autoCompleteSet) {\n    expectedContext.autoCompleteSet = _lodash2.default.sortBy(_lodash2.default.map(expectedContext.autoCompleteSet, norm), 'name');\n  }\n\n  deepEqual(context, expectedContext);\n}\n\nfunction t(term) {\n  return { name: term, meta: \"type\" };\n}\n\nfunction i(term) {\n  return { name: term, meta: \"index\" };\n}\n\nfunction index_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = new kb._test.loadApisFromJson({\n      index_test: {\n        endpoints: {\n          _multi_indices: {\n            patterns: [\"{indices}/_multi_indices\"]\n          },\n          _single_index: { patterns: [\"{index}/_single_index\"] },\n          _no_index: {\n            // testing default patters\n            //  patterns: [\"_no_index\"]\n          }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\nindex_test(\"Index integration 1\", [], [], { autoCompleteSet: [\"_no_index\", i(\"index1\"), i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [], [\"index1\"],\n// still return _no_index as index1 is not committed to yet.\n{ autoCompleteSet: [\"_no_index\", i(\"index2\")] });\n\nindex_test(\"Index integration 2\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_multi_indices\", \"_single_index\"] });\n\nindex_test(\"Index integration 2\", [[\"index1\", \"index2\"]], [], { indices: [\"index1\", \"index2\"], autoCompleteSet: [\"_multi_indices\"] });\n\nfunction type_test(name, tokenPath, otherTokenValues, expectedContext) {\n  test(name, function () {\n    var test_api = kb._test.loadApisFromJson({\n      \"type_test\": {\n        endpoints: {\n          _multi_types: { patterns: [\"{indices}/{types}/_multi_types\"] },\n          _single_type: { patterns: [\"{indices}/{type}/_single_type\"] },\n          _no_types: { patterns: [\"{indices}/_no_types\"] }\n        }\n      }\n    }, kb._test.globalUrlComponentFactories);\n    kb.setActiveApi(test_api);\n\n    mappings.loadMappings(MAPPING);\n\n    testUrlContext(tokenPath, otherTokenValues, expectedContext);\n  });\n}\n\ntype_test(\"Type integration 1\", [\"index1\"], [], { indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\"), t(\"type1.2\")] });\ntype_test(\"Type integration 2\", [\"index1\"], [\"type1.2\"],\n// we are not yet comitted to type1.2, so _no_types is returned\n{ indices: [\"index1\"], autoCompleteSet: [\"_no_types\", t(\"type1.1\")] });\n\ntype_test(\"Type integration 3\", [\"index2\"], [], { indices: [\"index2\"], autoCompleteSet: [\"_no_types\", t(\"type2.1\")] });\n\ntype_test(\"Type integration 4\", [\"index1\", \"type1.2\"], [], { indices: [\"index1\"], types: [\"type1.2\"], autoCompleteSet: [\"_multi_types\", \"_single_type\"] });\n\ntype_test(\"Type integration 5\", [[\"index1\", \"index2\"], [\"type1.2\", \"type1.1\"]], [], { indices: [\"index1\", \"index2\"], types: [\"type1.2\", \"type1.1\"], autoCompleteSet: [\"_multi_types\"] });\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/kb_tests.js\n// module id = 3445\n// module chunks = 2","\"use strict\";\n\nvar mappings = require('../../src/mappings');\n\nvar _window$QUnit = window.QUnit,\n    test = _window$QUnit.test,\n    _module = _window$QUnit.module,\n    deepEqual = _window$QUnit.deepEqual;\n\n\n_module(\"Mappings\", {\n  setup: function setup() {\n    mappings.clear();\n  },\n  teardown: function teardown() {\n    mappings.clear();\n  }\n});\n\nfunction fc(f1, f2) {\n  if (f1.name < f2.name) {\n    return -1;\n  }\n  if (f1.name > f2.name) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction f(name, type) {\n  return { name: name, type: type || \"string\" };\n}\n\ntest(\"Multi fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"first_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"multi_field\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"last_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\")]);\n});\n\ntest(\"Multi fields 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"first_name\": {\n            \"type\": \"string\", \"index\": \"analyzed\",\n            \"path\": \"just_name\",\n            \"fields\": {\n              \"any_name\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          },\n          \"last_name\": {\n            \"type\": \"string\", \"index\": \"no\",\n            \"fields\": {\n              \"raw\": { \"type\": \"string\", \"index\": \"analyzed\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"any_name\", \"string\"), f(\"first_name\", \"string\"), f(\"last_name\", \"string\"), f(\"last_name.raw\", \"string\")]);\n});\n\ntest(\"Simple fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"str\": {\n            \"type\": \"string\"\n          },\n          \"number\": {\n            \"type\": \"int\"\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Simple fields - 1.0 style\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"mappings\": {\n        \"tweet\": {\n          \"properties\": {\n            \"str\": {\n              \"type\": \"string\"\n            },\n            \"number\": {\n              \"type\": \"int\"\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\").sort(fc), [f(\"number\", \"int\"), f(\"str\", \"string\")]);\n});\n\ntest(\"Nested fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"properties\": {\n                  \"first_name\": { \"type\": \"string\" },\n                  \"last_name\": { \"type\": \"string\" }\n                }\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.name.first_name\"), f(\"person.name.last_name\"), f(\"person.sid\")]);\n});\n\ntest(\"Enabled fields\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"tweet\": {\n        \"properties\": {\n          \"person\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"object\",\n                \"enabled\": false\n              },\n              \"sid\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n            }\n          },\n          \"message\": { \"type\": \"string\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields(\"index\", [\"tweet\"]).sort(fc), [f(\"message\"), f(\"person.sid\")]);\n});\n\ntest(\"Path tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"name1\": {\n            \"type\": \"object\",\n            \"path\": \"just_name\",\n            \"properties\": {\n              \"first1\": { \"type\": \"string\" },\n              \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n            }\n          },\n          \"name2\": {\n            \"type\": \"object\",\n            \"path\": \"full\",\n            \"properties\": {\n              \"first2\": { \"type\": \"string\" },\n              \"last2\": { \"type\": \"string\", \"index_name\": \"i_last_2\" }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"first1\"), f(\"i_last_1\"), f(\"name2.first2\"), f(\"name2.i_last_2\")]);\n});\n\ntest(\"Use index_name tests\", function () {\n  mappings.loadMappings({\n    \"index\": {\n      \"person\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getFields().sort(fc), [f(\"i_last_1\")]);\n});\n\ntest(\"Aliases\", function () {\n  mappings.loadAliases({\n    \"test_index1\": {\n      \"aliases\": {\n        \"alias1\": {}\n      }\n    },\n    \"test_index2\": {\n      \"aliases\": {\n        \"alias2\": {\n          \"filter\": {\n            \"term\": {\n              \"FIELD\": \"VALUE\"\n            }\n          }\n        },\n        \"alias1\": {}\n      }\n    }\n  });\n  mappings.loadMappings({\n    \"test_index1\": {\n      \"type1\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    },\n    \"test_index2\": {\n      \"type2\": {\n        \"properties\": {\n          \"last1\": { \"type\": \"string\", \"index_name\": \"i_last_1\" }\n        }\n      }\n    }\n  });\n\n  deepEqual(mappings.getIndices().sort(), [\"_all\", \"alias1\", \"alias2\", \"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.getIndices(false).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases([\"alias1\", \"test_index2\"]).sort(), [\"test_index1\", \"test_index2\"]);\n  deepEqual(mappings.expandAliases(\"alias2\"), \"test_index2\");\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/mapping_tests.js\n// module id = 3457\n// module chunks = 2","'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _input = require('../../src/input');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ace = require('ace');\n\nvar editor_input1 = require('raw-loader!./editor_input1.txt');\nvar utils = require('../../src/utils');\n\nvar aceRange = ace.require(\"ace/range\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    equal = _window$QUnit.equal,\n    start = _window$QUnit.start;\n\n\nvar input = void 0;\n\n_module(\"Editor\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)((0, _jquery2.default)('#editor'), (0, _jquery2.default)('#editor_actions'), (0, _jquery2.default)('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nvar testCount = 0;\n\nfunction utils_test(name, prefix, data, test) {\n  var id = testCount++;\n  if (typeof data == \"function\") {\n    test = data;\n    data = null;\n  }\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Utils test \" + id + \" : \" + name, function () {\n    input.update(data, function () {\n      test();\n    });\n  });\n}\n\nfunction compareRequest(requests, expected) {\n  if (!Array.isArray(requests)) {\n    requests = [requests];\n    expected = [expected];\n  }\n\n  _lodash2.default.each(requests, function (r) {\n    delete r.range;\n  });\n  deepEqual(requests, expected);\n}\n\nvar simple_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"match_all\": {} }', '}'].join('\\n')\n};\n\nvar single_line_request = {\n  prefix: 'POST _search',\n  data: '{ \"query\": { \"match_all\": {} } }'\n};\n\nvar get_request_no_data = {\n  prefix: 'GET _stats'\n};\n\nvar multi_doc_request = {\n  prefix: 'POST _bulk',\n  data_as_array: ['{ \"index\": { \"_index\": \"index\", \"_type\":\"type\" } }', '{ \"field\": 1 }']\n};\nmulti_doc_request.data = multi_doc_request.data_as_array.join(\"\\n\");\n\nutils_test(\"simple request range\", simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, prefixed with spaces\", \"   \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, prefixed with spaces\", \"    \" + simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request range, suffixed with spaces\", simple_request.prefix + \"   \", simple_request.data + \"  \", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 3, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data, suffixed with spaces\", simple_request.prefix + \"    \", simple_request.data + \" \", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [simple_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"single line request range\", single_line_request.prefix, single_line_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 1, 32);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"full url: single line request data\", \"POST https://somehoset/_search\", single_line_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"https://somehoset/_search\",\n      data: [single_line_request.data]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data followed by a new line (data)\", get_request_no_data.prefix, \"\\n\", function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 0, 10);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"request with no data (data)\", get_request_no_data.prefix, get_request_no_data.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"GET\",\n      url: \"_stats\",\n      data: []\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request range\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 2, 14);\n    deepEqual(range, expected);\n    start();\n  });\n});\n\nutils_test(\"multi doc request data\", multi_doc_request.prefix, multi_doc_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_bulk\",\n      data: multi_doc_request.data_as_array\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nvar script_request = {\n  prefix: 'POST _search',\n  data: ['{', '   \"query\": { \"script\": \"\"\"', '   some script ', '   \"\"\"}', '}'].join('\\n')\n};\n\nutils_test(\"script request range\", script_request.prefix, script_request.data, function () {\n  input.getRequestRange(function (range) {\n    var expected = new aceRange.Range(0, 0, 5, 1);\n    compareRequest(range, expected);\n    start();\n  });\n});\n\nutils_test(\"simple request data\", simple_request.prefix, simple_request.data, function () {\n  input.getRequest(function (request) {\n    var expected = {\n      method: \"POST\",\n      url: \"_search\",\n      data: [utils.collapseLiteralStrings(simple_request.data)]\n    };\n\n    compareRequest(request, expected);\n    start();\n  });\n});\n\nfunction multi_req_test(name, editor_input, range, expected) {\n  utils_test(\"multi request select - \" + name, editor_input, function () {\n    input.getRequestsInRange(range, function (requests) {\n      // convert to format returned by request.\n      _lodash2.default.each(expected, function (req) {\n        req.data = req.data == null ? [] : [JSON.stringify(req.data, null, 2)];\n      });\n\n      compareRequest(requests, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_test(\"mid body to mid body\", editor_input1, { start: { row: 12 }, end: { row: 17 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/2\",\n  data: {\n    \"f\": 2\n  }\n}]);\n\nmulti_req_test(\"single request start to end\", editor_input1, { start: { row: 10 }, end: { row: 13 } }, [{\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"before start to after end, with comments\", editor_input1, { start: { row: 4 }, end: { row: 14 } }, [{\n  method: \"GET\",\n  url: \"_stats?level=shards\",\n  data: null\n}, {\n  method: \"PUT\",\n  url: \"index_1/type1/1\",\n  data: {\n    \"f\": 1\n  }\n}]);\n\nmulti_req_test(\"between requests\", editor_input1, { start: { row: 21 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - with comment\", editor_input1, { start: { row: 20 }, end: { row: 22 } }, []);\n\nmulti_req_test(\"between requests - before comment\", editor_input1, { start: { row: 19 }, end: { row: 22 } }, []);\n\nfunction multi_req_copy_as_curl_test(name, editor_input, range, expected) {\n  utils_test(\"multi request copy as curl - \" + name, editor_input, function () {\n    input.getRequestsAsCURL(range, function (curl) {\n      equal(curl, expected);\n      start();\n    });\n  });\n}\n\nmulti_req_copy_as_curl_test(\"start to end, with comment\", editor_input1, { start: { row: 6 }, end: { row: 13 } }, '\\ncurl -XGET \"http://localhost:9200/_stats?level=shards\"\\n\\n#in between comment\\n\\ncurl -XPUT \"http://localhost:9200/index_1/type1/1\" -H \\'Content-Type: application/json\\' -d\\'\\n{\\n  \"f\": 1\\n}\\''.trim());\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/editor_tests.js\n// module id = 3458\n// module chunks = 2","module.exports = \"GET _search\\r\\n{\\r\\n  \\\"query\\\": { \\\"match_all\\\": {} }\\r\\n}\\r\\n\\r\\n#preceeding comment\\r\\nGET _stats?level=shards\\r\\n\\r\\n#in between comment\\r\\n\\r\\nPUT index_1/type1/1\\r\\n{\\r\\n  \\\"f\\\": 1\\r\\n}\\r\\n\\r\\nPUT index_1/type1/2\\r\\n{\\r\\n  \\\"f\\\": 2\\r\\n}\\r\\n\\r\\n# comment\\r\\n\\r\\n\\r\\nGET index_1/type1/1/_source?_source_include=f\\r\\n\\r\\nDELETE index_2\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./src/core_plugins/console/public/tests/src/editor_input1.txt\n// module id = 3459\n// module chunks = 2","'use strict';\n\nvar _input = require('../../src/input');\n\nvar ace = require('ace');\nvar $ = require('jquery');\n\nvar input = void 0;\n\nvar token_iterator = ace.require(\"ace/token_iterator\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    start = _window$QUnit.start;\n\n\n_module(\"Input Tokenization\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)($('#editor'), $('#editor_actions'), $('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nfunction tokensAsList() {\n  var iter = new token_iterator.TokenIterator(input.getSession(), 0, 0);\n  var ret = [];\n  var t = iter.getCurrentToken();\n  if (input.parser.isEmptyToken(t)) {\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n  while (t) {\n    ret.push({ value: t.value, type: t.type });\n    t = input.parser.nextNonEmptyToken(iter);\n  }\n\n  return ret;\n}\n\nvar testCount = 0;\n\nfunction token_test(token_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"Token test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var tokens = tokensAsList();\n      var normTokenList = [];\n      for (var i = 0; i < token_list.length; i++) {\n        normTokenList.push({ type: token_list[i++], value: token_list[i] });\n      }\n\n      deepEqual(tokens, normTokenList, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_search\"], \"GET _search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET http://somehost/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\"], \"GET http://somehost\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://somehost\", \"url.slash\", \"/\"], \"GET http://somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.protocol_host\", \"http://test:user@somehost\", \"url.slash\", \"/\"], \"GET http://test:user@somehost/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET _cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"_cluster\", \"url.slash\", \"/\", \"url.part\", \"nodes\"], \"GET /_cluster/nodes\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\"], \"GET index\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\"], \"GET index/type\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\"], \"GET /index/type/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/type/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"_search\", \"url.questionmark\", \"?\", \"url.param\", \"value\", \"url.equal\", \"=\", \"url.value\", \"1\"], \"GET index/type/_search?value=1\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"type\", \"url.slash\", \"/\", \"url.part\", \"1\"], \"GET index/type/1\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\"], \"GET /index1,index2/\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET /index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index1,index2/_search\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET /index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\"], \"GET index1,index2\");\n\ntoken_test([\"method\", \"GET\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\"], \"GET /index1,\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\", \"url.slash\", \"/\"], \"PUT /index/\");\n\ntoken_test([\"method\", \"GET\", \"url.part\", \"index\", \"url.slash\", \"/\", \"url.part\", \"_search\"], \"GET index/_search \");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index\"], \"PUT /index\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\"], \"PUT /index1,index2/type1,type2\");\n\ntoken_test([\"method\", \"PUT\", \"url.slash\", \"/\", \"url.part\", \"index1\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.comma\", \",\"], \"PUT /index1/type1,type2,\");\n\ntoken_test([\"method\", \"PUT\", \"url.part\", \"index1\", \"url.comma\", \",\", \"url.part\", \"index2\", \"url.slash\", \"/\", \"url.part\", \"type1\", \"url.comma\", \",\", \"url.part\", \"type2\", \"url.slash\", \"/\", \"url.part\", \"1234\"], \"PUT index1,index2/type1,type2/1234\");\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": {}\\n' + '  \\n' + '}');\n\ntoken_test([\"method\", \"POST\", \"url.part\", \"_search\", \"paren.lparen\", \"{\", \"variable\", '\"q\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"variable\", '\"s\"', \"punctuation.colon\", \":\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\", \"paren.rparen\", \"}\"], 'POST _search\\n' + '{\\n' + '  \"q\": { \"s\": {}}\\n' + '  \\n' + '}');\n\nfunction statesAsList() {\n  var ret = [];\n  var session = input.getSession();\n  var maxLine = session.getLength();\n  for (var row = 0; row < maxLine; row++) {\n    ret.push(session.getState(row));\n  }return ret;\n}\n\nfunction states_test(states_list, prefix, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  if (data) {\n    if (prefix) {\n      data = prefix + \"\\n\" + data;\n    }\n  } else {\n    data = prefix;\n  }\n\n  asyncTest(\"States test \" + testCount++ + \" prefix: \" + prefix, function () {\n    input.update(data, function () {\n      var modes = statesAsList();\n      deepEqual(modes, states_list, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \"match_all\": {} }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"query\": { \\n' + '  \"match_all\": {} \\n' + '  }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": { \"inline\": \"\" }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": {\\n' + '   }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\", \"json\", \"json\"], [\"script-start\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"test\": { \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\"\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"script-start\", \"json\"], [\"script-start\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"script\": \"\"\"test script\"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\"], [\"string_literal\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + '}');\n\nstates_test([\"start\", \"json\", [\"string_literal\", \"json\", \"json\", \"json\"], [\"string_literal\", \"json\", \"json\", \"json\"], [\"json\", \"json\"], [\"json\", \"json\"], \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"somthing\": { \"f\" : \"\"\"\\n' + '  test script\\n' + ' \"\"\",\\n' + ' \"g\": 1\\n' + ' }\\n' + '}');\n\nstates_test([\"start\", \"json\", \"json\", \"start\"], 'POST _search\\n' + '{\\n' + '  \"something\": \"\"\"test script\"\"\",\\n' + '}');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/input_tokenization_tests.js\n// module id = 3460\n// module chunks = 2","'use strict';\n\nvar _output = require('../../src/output');\n\nvar ace = require('ace');\nvar $ = require('jquery');\nvar RowParser = require('../../src/sense_editor/row_parser');\n\nvar output = void 0;\n\nvar token_iterator = ace.require(\"ace/token_iterator\");\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    start = _window$QUnit.start;\n\n\n_module(\"Output Tokenization\", {\n  setup: function setup() {\n    output = (0, _output.initializeOutput)($('#output'));\n    output.$el.show();\n  },\n  teardown: function teardown() {\n    output.$el.hide();\n  }\n});\n\nfunction tokensAsList() {\n  var iter = new token_iterator.TokenIterator(output.getSession(), 0, 0);\n  var ret = [];\n  var t = iter.getCurrentToken();\n  var parser = new RowParser(output);\n  if (parser.isEmptyToken(t)) {\n    t = parser.nextNonEmptyToken(iter);\n  }\n  while (t) {\n    ret.push({ value: t.value, type: t.type });\n    t = parser.nextNonEmptyToken(iter);\n  }\n\n  return ret;\n}\n\nvar testCount = 0;\n\nfunction token_test(token_list, data) {\n  if (data && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n\n  asyncTest(\"Token test \" + testCount++, function () {\n    output.update(data, function () {\n      var tokens = tokensAsList();\n      var normTokenList = [];\n      for (var i = 0; i < token_list.length; i++) {\n        normTokenList.push({ type: token_list[i++], value: token_list[i] });\n      }\n\n      deepEqual(tokens, normTokenList, \"Doc:\\n\" + data);\n      start();\n    });\n  });\n}\n\ntoken_test([\"warning\", \"#! warning\", \"comment\", \"# GET url\", \"paren.lparen\", \"{\", \"paren.rparen\", \"}\"], \"#! warning\\n\" + \"# GET url\\n\" + \"{}\");\n\ntoken_test([\"comment\", \"# GET url\", \"paren.lparen\", \"{\", \"variable\", '\"f\"', \"punctuation.colon\", \":\", \"punctuation.start_triple_quote\", '\"\"\"', \"multi_string\", \"raw\", \"punctuation.end_triple_quote\", '\"\"\"', \"paren.rparen\", \"}\"], '# GET url\\n' + '{ \"f\": \"\"\"raw\"\"\" }');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/output_tokenization_tests.js\n// module id = 3461\n// module chunks = 2","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _input = require('../../src/input');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar input = void 0;\nvar kb = require('../../src/kb');\nvar mappings = require('../../src/mappings');\nvar $ = require('jquery');\n\nvar _window$QUnit = window.QUnit,\n    _module = _window$QUnit.module,\n    ok = _window$QUnit.ok,\n    asyncTest = _window$QUnit.asyncTest,\n    deepEqual = _window$QUnit.deepEqual,\n    equal = _window$QUnit.equal,\n    start = _window$QUnit.start;\n\n\n_module(\"Integration\", {\n  setup: function setup() {\n    input = (0, _input.initializeInput)($('#editor'), $('#editor_actions'), $('#copy_as_curl'), null);\n    input.$el.show();\n    input.autocomplete._test.removeChangeListener();\n  },\n  teardown: function teardown() {\n    input.$el.hide();\n    input.autocomplete._test.addChangeListener();\n  }\n});\n\nfunction process_context_test(data, mapping, kb_schemes, request_line, test) {\n  asyncTest(test.name, function () {\n\n    console.debug(\"starting test \" + test.name);\n\n    var rowOffset = 0; // add one for the extra method line\n    var editorValue = data;\n    if (request_line != null) {\n      if (data != null) {\n        editorValue = request_line + \"\\n\" + data;\n        rowOffset = 1;\n      } else {\n        editorValue = request_line;\n      }\n    }\n\n    test.cursor.row += rowOffset;\n\n    mappings.clear();\n    mappings.loadMappings(mapping);\n    var json = {};\n    json[test.name] = kb_schemes || {};\n    var test_api = kb._test.loadApisFromJson(json);\n    //if (kb_schemes) {\n    //  if (kb_schemes.globals) {\n    //    $.each(kb_schemes.globals, function (parent, rules) {\n    //      test_api.addGlobalAutocompleteRules(parent, rules);\n    //    });\n    //  }\n    //  if (kb_schemes.endpoints) {\n    //    $.each(kb_schemes.endpoints, function (endpoint, scheme) {\n    //      _.defaults(scheme, {methods: null}); // disable method testing unless specified in test\n    //      test_api.addEndpointDescription(endpoint, scheme);\n    //    });\n    //  }\n    //}\n    kb.setActiveApi(test_api);\n\n    input.update(editorValue, function () {\n      input.moveCursorTo(test.cursor.row, test.cursor.column);\n\n      // allow ace rendering to move cursor so it will be seen during test - handy for debugging.\n      setTimeout(function () {\n        input.completer = {\n          base: {},\n          changeListener: function changeListener() {}\n        }; // mimic auto complete\n\n        input.autocomplete._test.getCompletions(input, input.getSession(), test.cursor, \"\", function (err, terms) {\n\n          if (test.assertThrows) {\n            ok(test.assertThrows.test(\"\" + err), \"failed to throw expected exception\");\n            start();\n            return;\n          }\n\n          if (err) {\n            throw err;\n          }\n\n          if (test.no_context) {\n            ok(!terms || terms.length === 0, \"Expected no context bug got terms.\");\n          } else {\n            ok(terms && terms.length > 0, \"failed to extract terms ...\");\n          }\n\n          if (!terms || terms.length === 0) {\n            start();\n            return;\n          }\n\n          if (test[\"autoCompleteSet\"]) {\n            var expected_terms = _lodash2.default.map(test[\"autoCompleteSet\"], function (t) {\n              if ((typeof t === 'undefined' ? 'undefined' : _typeof(t)) !== \"object\") {\n                t = { \"name\": t };\n              }\n              return t;\n            });\n            if (terms.length != expected_terms.length) {\n              equal(_lodash2.default.pluck(terms, 'name'), _lodash2.default.pluck(expected_terms, 'name'), \"list of completion terms is not of equal size\");\n            } else {\n              var filtered_actual_terms = _lodash2.default.map(terms, function (actual_term, i) {\n                var expected_term = expected_terms[i];\n                var filtered_term = {};\n                _lodash2.default.each(expected_term, function (v, p) {\n                  filtered_term[p] = actual_term[p];\n                });\n                return filtered_term;\n              });\n              deepEqual(filtered_actual_terms, expected_terms);\n            }\n          }\n\n          var context = terms[0].context;\n          input.autocomplete._test.addReplacementInfoToContext(context, test.cursor, terms[0].value);\n\n          function ac(prop, prop_test) {\n            if (typeof test[prop] != \"undefined\") {\n              if (prop_test) {\n                prop_test(context[prop], test[prop], prop);\n              } else {\n                deepEqual(context[prop], test[prop], 'context.' + prop + ' should equal ' + JSON.stringify(test[prop]));\n              }\n            }\n          }\n\n          function pos_compare(actual, expected, name) {\n            equal(actual.row, expected.row + rowOffset, \"row of \" + name + \" position is not as expected\");\n            equal(actual.column, expected.column, \"column of \" + name + \" position is not as expected\");\n          }\n\n          function range_compare(actual, expected, name) {\n            pos_compare(actual.start, expected.start, name + \".start\");\n            pos_compare(actual.end, expected.end, name + \".end\");\n          }\n\n          ac(\"prefixToAdd\");\n          ac(\"suffixToAdd\");\n          ac(\"addTemplate\");\n          ac(\"textBoxPosition\", pos_compare);\n          ac(\"rangeToReplace\", range_compare);\n\n          start();\n        });\n      });\n    });\n  });\n}\n\nfunction context_tests(data, mapping, kb_schemes, request_line, tests) {\n  if (data != null && typeof data != \"string\") {\n    data = JSON.stringify(data, null, 3);\n  }\n  for (var t = 0; t < tests.length; t++) {\n    process_context_test(data, mapping, kb_schemes, request_line, tests[t]);\n  }\n}\n\nvar SEARCH_KB = {\n  endpoints: {\n    _search: {\n      methods: [\"GET\", \"POST\"],\n      patterns: [\"{indices}/{types}/_search\", \"{indices}/_search\", \"_search\"],\n      data_autocomplete_rules: {\n        query: { match_all: {}, term: { \"{field}\": { __template: { \"f\": 1 } } } },\n        size: {},\n        facets: {\n          __template: {\n            \"FIELD\": {}\n          },\n          \"*\": { terms: { field: \"{field}\" } }\n        }\n      }\n    }\n  }\n};\n\nvar MAPPING = {\n  \"index1\": {\n    \"type1.1\": {\n      \"properties\": {\n        \"field1.1.1\": { \"type\": \"string\" },\n        \"field1.1.2\": { \"type\": \"string\" }\n      }\n    }\n  },\n  \"index2\": {\n    \"type2.1\": {\n      \"properties\": {\n        \"field2.1.1\": { \"type\": \"string\" },\n        \"field2.1.2\": { \"type\": \"string\" }\n      }\n    }\n  }\n};\n\ncontext_tests({}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Empty doc\",\n  cursor: { row: 0, column: 1 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 0, column: 1 }, end: { row: 0, column: 1 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\ncontext_tests({}, MAPPING, SEARCH_KB, \"POST _no_context\", [{\n  name: \"Missing KB\",\n  cursor: { row: 0, column: 1 },\n  no_context: true\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"f\": 1\n  }\n}, MAPPING, {\n  globals: {\n    query: {\n      t1: 2\n    }\n  },\n  endpoints: {}\n}, \"POST _no_context\", [{\n  name: \"Missing KB - global auto complete\",\n  cursor: { row: 2, column: 5 },\n  autoCompleteSet: [\"t1\"]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {},\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"existing dictionary key, no template\",\n  cursor: { row: 1, column: 6 },\n  initialValue: \"query\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 10 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"existing inner dictionary key\",\n  cursor: { row: 2, column: 7 },\n  initialValue: \"field\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 2, column: 6 }, end: { row: 2, column: 13 } },\n  autoCompleteSet: [\"match_all\", \"term\"]\n}, {\n  name: \"existing dictionary key, yes template\",\n  cursor: { row: 4, column: 7 },\n  initialValue: \"facets\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 4, column: 3 }, end: { row: 4, column: 15 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"ignoring meta keys\",\n  cursor: { row: 4, column: 14 },\n  no_context: true\n}]);\n\ncontext_tests('{\\n' + '   \"query\": {\\n' + '    \"field\": \"something\"\\n' + '   },\\n' + '   \"facets\": {},\\n' + '   \"size\": 20 \\n' + '}', MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"trailing comma, end of line\",\n  cursor: { row: 4, column: 16 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \", \",\n  rangeToReplace: { start: { row: 4, column: 16 }, end: { row: 4, column: 16 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"trailing comma, beginning of line\",\n  cursor: { row: 5, column: 1 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \", \",\n  rangeToReplace: { start: { row: 5, column: 1 }, end: { row: 5, column: 1 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"prefix comma, beginning of line\",\n  cursor: { row: 6, column: 0 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \", \",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 6, column: 0 }, end: { row: 6, column: 0 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"prefix comma, end of line\",\n  cursor: { row: 5, column: 14 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \", \",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 5, column: 14 }, end: { row: 5, column: 14 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\ncontext_tests({\n  \"object\": 1,\n  \"array\": 1,\n  \"value_one_of\": 1,\n  \"value\": 2,\n  \"something_else\": 5\n}, MAPPING, {\n  endpoints: {\n    _test: {\n      patterns: [\"_test\"],\n      data_autocomplete_rules: {\n        object: { bla: 1 },\n        array: [1],\n        value_one_of: { __one_of: [1, 2] },\n        value: 3,\n        \"*\": { __one_of: [4, 5] }\n      }\n    }\n  }\n}, \"GET _test\", [{\n  name: \"not matching object when { is not opened\",\n  cursor: { row: 1, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [\"{\"]\n}, {\n  name: \"not matching array when [ is not opened\",\n  cursor: { row: 2, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [\"[\"]\n}, {\n  name: \"matching value with one_of\",\n  cursor: { row: 3, column: 19 },\n  initialValue: \"\",\n  autoCompleteSet: [1, 2]\n}, {\n  name: \"matching value\",\n  cursor: { row: 4, column: 12 },\n  initialValue: \"\",\n  autoCompleteSet: [3]\n}, {\n  name: \"matching any value with one_of\",\n  cursor: { row: 5, column: 21 },\n  initialValue: \"\",\n  autoCompleteSet: [4, 5]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {\n    \"name\": {}\n  },\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"GET _search\", [{\n  name: \"* matching everything\",\n  cursor: { row: 5, column: 15 },\n  initialValue: \"\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 5, column: 15 }, end: { row: 5, column: 15 } },\n  autoCompleteSet: [{ name: \"terms\", meta: \"API\" }]\n}]);\n\ncontext_tests({\n  \"index\": \"123\"\n}, MAPPING, {\n  endpoints: {\n    _test: {\n      patterns: [\"_test\"],\n      data_autocomplete_rules: {\n        index: \"{index}\"\n      }\n    }\n  }\n}, \"GET _test\", [{\n  name: \"{index} matching\",\n  cursor: { row: 1, column: 15 },\n  autoCompleteSet: [{ name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }]\n}]);\n\nfunction tt(term, template, meta) {\n  term = { name: term, template: template };\n  if (meta) {\n    term.meta = meta;\n  }\n  return term;\n}\n\ncontext_tests({\n  \"array\": [\"a\"],\n  \"oneof\": \"1\"\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        array: [\"a\", \"b\"],\n        number: 1,\n        object: {},\n        fixed: { __template: { \"a\": 1 } },\n        oneof: { __one_of: [\"o1\", \"o2\"] }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Templates 1\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [tt(\"array\", []), tt(\"fixed\", { a: 1 }), tt(\"number\", 1), tt(\"object\", {}), tt(\"oneof\", \"o1\")]\n}, {\n  name: \"Templates - one off\",\n  cursor: { row: 4, column: 12 },\n  autoCompleteSet: [tt(\"o1\"), tt(\"o2\")]\n}]);\n\ncontext_tests({\n  \"string\": \"value\",\n  \"context\": {}\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        context: {\n          __one_of: [{\n            __condition: {\n              lines_regex: \"value\"\n            },\n            \"match\": {}\n          }, {\n            __condition: {\n              lines_regex: \"other\"\n            },\n            \"no_match\": {}\n          }, { \"always\": {} }]\n        }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Conditionals\",\n  cursor: { row: 2, column: 15 },\n  autoCompleteSet: [tt(\"always\", {}), tt(\"match\", {})]\n}]);\n\ncontext_tests({\n  \"any_of_numbers\": [1],\n  \"any_of_obj\": [{\n    \"a\": 1\n  }],\n  \"any_of_mixed\": [{\n    \"a\": 1\n  }, 2]\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        any_of_numbers: { __template: [1, 2], __any_of: [1, 2, 3] },\n        any_of_obj: {\n          __template: [{ c: 1 }], __any_of: [{ a: 1, b: 2 }, { c: 1 }]\n        },\n        any_of_mixed: {\n          __any_of: [{ a: 1 }, 3]\n        }\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Any of - templates\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [tt(\"any_of_mixed\", []), tt(\"any_of_numbers\", [1, 2]), tt(\"any_of_obj\", [{ c: 1 }])]\n}, {\n  name: \"Any of - numbers\",\n  cursor: { row: 2, column: 2 },\n  autoCompleteSet: [1, 2, 3]\n}, {\n  name: \"Any of - object\",\n  cursor: { row: 6, column: 2 },\n  autoCompleteSet: [tt(\"a\", 1), tt(\"b\", 2), tt(\"c\", 1)]\n}, {\n  name: \"Any of - mixed - obj\",\n  cursor: { row: 11, column: 2 },\n  autoCompleteSet: [tt(\"a\", 1)]\n}, {\n  name: \"Any of - mixed - both\",\n  cursor: { row: 13, column: 2 },\n  autoCompleteSet: [tt(\"{\"), tt(3)]\n}]);\n\ncontext_tests({}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"query\": \"\"\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Empty string as default\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"query\", \"\")]\n}]);\n\ncontext_tests({\n  \"a\": {\n    \"b\": {},\n    \"c\": {},\n    \"d\": {\n      t1a: {}\n    },\n    \"e\": {},\n    \"f\": [{}],\n    \"g\": {},\n    \"h\": {}\n  }\n}, MAPPING, {\n  globals: {\n    gtarget: {\n      t1: 2,\n      t1a: {\n        __scope_link: \".\"\n      }\n    }\n  },\n  endpoints: {\n    _current: {\n      patterns: [\"_current\"],\n      data_autocomplete_rules: {\n        \"a\": {\n          \"b\": {\n            __scope_link: \".a\"\n          },\n          \"c\": {\n            __scope_link: \"ext.target\"\n          },\n          \"d\": {\n            __scope_link: \"GLOBAL.gtarget\"\n          },\n          \"e\": {\n            __scope_link: \"ext\"\n          },\n          \"f\": [{\n            __scope_link: \"ext.target\"\n          }],\n          \"g\": {\n            __scope_link: function __scope_link() {\n              return {\n                \"a\": 1,\n                \"b\": 2\n              };\n            }\n          },\n          \"h\": {\n            __scope_link: \"GLOBAL.broken\"\n          }\n        }\n      }\n    },\n    ext: {\n      patterns: [\"ext\"],\n      data_autocomplete_rules: {\n        target: {\n          t2: 1\n        }\n      }\n    }\n  }\n}, \"GET _current\", [{\n  name: \"Relative scope link test\",\n  cursor: { row: 2, column: 12 },\n  autoCompleteSet: [tt(\"b\", {}), tt(\"c\", {}), tt(\"d\", {}), tt(\"e\", {}), tt(\"f\", [{}]), tt(\"g\", {}), tt(\"h\", {})]\n}, {\n  name: \"External scope link test\",\n  cursor: { row: 3, column: 12 },\n  autoCompleteSet: [tt(\"t2\", 1)]\n}, {\n  name: \"Global scope link test\",\n  cursor: { row: 4, column: 12 },\n  autoCompleteSet: [tt(\"t1\", 2), tt(\"t1a\", {})]\n}, {\n  name: \"Global scope link with an internal scope link\",\n  cursor: { row: 5, column: 17 },\n  autoCompleteSet: [tt(\"t1\", 2), tt(\"t1a\", {})]\n}, {\n  name: \"Entire endpoint scope link test\",\n  cursor: { row: 7, column: 12 },\n  autoCompleteSet: [tt(\"target\", {})]\n}, {\n  name: \"A scope link within an array\",\n  cursor: { row: 9, column: 10 },\n  autoCompleteSet: [tt(\"t2\", 1)]\n}, {\n  name: \"A function based scope link\",\n  cursor: { row: 11, column: 12 },\n  autoCompleteSet: [tt(\"a\", 1), tt(\"b\", 2)]\n}, {\n  name: \"A global scope link with wrong link\",\n  cursor: { row: 12, column: 12 },\n  assertThrows: /broken/\n\n}]);\n\ncontext_tests({}, MAPPING, {\n  globals: {\n    gtarget: {\n      t1: 2\n    }\n  },\n  endpoints: {\n    _current: {\n      patterns: [\"_current\"],\n      id: \"GET _current\",\n      data_autocomplete_rules: {\n        __scope_link: \"GLOBAL.gtarget\"\n      }\n    }\n  }\n}, \"GET _current\", [{\n  name: \"Top level scope link\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"t1\", 2)]\n}]);\n\ncontext_tests({\n  \"a\": {}\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"a\": {},\n        \"b\": {}\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"Path after empty object\",\n  cursor: { row: 1, column: 10 },\n  autoCompleteSet: [\"a\", \"b\"]\n}]);\n\ncontext_tests({\n  \"\": {}\n}, MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Replace an empty string\",\n  cursor: { row: 1, column: 4 },\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 9 } }\n}]);\n\ncontext_tests({\n  \"a\": [{\n    \"c\": {}\n  }]\n}, MAPPING, {\n  endpoints: {\n    _endpoint: {\n      patterns: [\"_endpoint\"],\n      data_autocomplete_rules: {\n        \"a\": [{ b: 1 }]\n      }\n    }\n  }\n}, \"GET _endpoint\", [{\n  name: \"List of objects - internal autocomplete\",\n  cursor: { row: 3, column: 10 },\n  autoCompleteSet: [\"b\"]\n}, {\n  name: \"List of objects - external template\",\n  cursor: { row: 0, column: 1 },\n  autoCompleteSet: [tt(\"a\", [{}])]\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"term\": {\n      \"field\": \"something\"\n    }\n  },\n  \"facets\": {\n    \"test\": {\n      \"terms\": {\n        \"field\": \"test\"\n      }\n    }\n  },\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST index1/_search\", [{\n  name: \"Field completion as scope\",\n  cursor: { row: 3, column: 10 },\n  autoCompleteSet: [tt(\"field1.1.1\", { \"f\": 1 }, \"string\"), tt(\"field1.1.2\", { \"f\": 1 }, \"string\")]\n}, {\n  name: \"Field completion as value\",\n  cursor: { row: 9, column: 23 },\n  autoCompleteSet: [{ name: \"field1.1.1\", meta: \"string\" }, { name: \"field1.1.2\", meta: \"string\" }]\n}]);\n\ncontext_tests(\"POST _search\", MAPPING, SEARCH_KB, null, [{\n  name: \"initial doc start\",\n  cursor: { row: 1, column: 0 },\n  autoCompleteSet: [\"{\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests('{\\n' + '   \"query\": {} \\n' + '}\\n' + '\\n' + '\\n', MAPPING, SEARCH_KB, \"POST _search\", [{\n  name: \"Cursor rows after request end\",\n  cursor: { row: 4, column: 0 },\n  autoCompleteSet: [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \" \"\n}, {\n  name: \"Cursor just after request end\",\n  cursor: { row: 2, column: 1 },\n  no_context: true\n}]);\n\nvar CLUSTER_KB = {\n  endpoints: {\n    \"_search\": {\n      patterns: [\"_search\", \"{indices}/{types}/_search\", \"{indices}/_search\"],\n      url_params: {\n        \"search_type\": [\"count\", \"query_then_fetch\"],\n        \"scroll\": \"10m\"\n      },\n      data_autocomplete_rules: {}\n    },\n    \"_cluster/stats\": {\n      patterns: [\"_cluster/stats\"],\n      indices_mode: \"none\",\n      data_autocomplete_rules: {}\n    },\n    \"_cluster/nodes/stats\": {\n      patterns: [\"_cluster/nodes/stats\"],\n      data_autocomplete_rules: {}\n    }\n  }\n};\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster\", [{\n  name: \"Endpoints with slashes - no slash\",\n  cursor: { row: 0, column: 8 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/\", [{\n  name: \"Endpoints with slashes - before slash\",\n  cursor: { row: 0, column: 7 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}, {\n  name: \"Endpoints with slashes - on slash\",\n  cursor: { row: 0, column: 12 },\n  autoCompleteSet: [\"_cluster/nodes/stats\", \"_cluster/stats\", \"_search\", \"index1\", \"index2\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}, {\n  name: \"Endpoints with slashes - after slash\",\n  cursor: { row: 0, column: 13 },\n  autoCompleteSet: [\"nodes/stats\", \"stats\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/no\", [{\n  name: \"Endpoints with slashes - after slash\",\n  cursor: { row: 0, column: 14 },\n  autoCompleteSet: [{ name: \"nodes/stats\", meta: \"endpoint\" }, { name: \"stats\", meta: \"endpoint\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"no\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _cluster/nodes/st\", [{\n  name: \"Endpoints with two slashes\",\n  cursor: { row: 0, column: 20 },\n  autoCompleteSet: [\"stats\"],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"st\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET \", [{\n  name: \"Immediately after space + method\",\n  cursor: { row: 0, column: 4 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET cl\", [{\n  name: \"Endpoints by subpart\",\n  cursor: { row: 0, column: 6 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"cl\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"POST cl\", [{\n  name: \"Endpoints by subpart\",\n  cursor: { row: 0, column: 7 },\n  autoCompleteSet: [{ name: \"_cluster/nodes/stats\", meta: \"endpoint\" }, { name: \"_cluster/stats\", meta: \"endpoint\" }, { name: \"_search\", meta: \"endpoint\" }, { name: \"index1\", meta: \"index\" }, { name: \"index2\", meta: \"index\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  initialValue: \"cl\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?\", [{\n  name: \"Params just after ?\",\n  cursor: { row: 0, column: 12 },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=\", [{\n  name: \"Params values\",\n  cursor: { row: 0, column: 19 },\n  autoCompleteSet: [{ name: \"json\", meta: \"format\" }, { name: \"yaml\", meta: \"format\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&\", [{\n  name: \"Params after amp\",\n  cursor: { row: 0, column: 24 },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search\", [{\n  name: \"Params on existing param\",\n  cursor: { row: 0, column: 26 },\n  rangeToReplace: {\n    start: { row: 0, column: 24 },\n    end: { row: 0, column: 30 }\n  },\n  autoCompleteSet: [{ name: \"filter_path\", meta: \"param\", \"insert_value\": \"filter_path=\" }, { name: \"format\", meta: \"param\", \"insert_value\": \"format=\" }, { name: \"pretty\", meta: \"flag\" }, { name: \"scroll\", meta: \"param\", \"insert_value\": \"scroll=\" }, { name: \"search_type\", meta: \"param\", \"insert_value\": \"search_type=\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search_type=cou\", [{\n  name: \"Params on existing value\",\n  cursor: { row: 0, column: 37 },\n  rangeToReplace: {\n    start: { row: 0, column: 36 },\n    end: { row: 0, column: 39 }\n  },\n  autoCompleteSet: [{ name: \"count\", meta: \"search_type\" }, { name: \"query_then_fetch\", meta: \"search_type\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\ncontext_tests(null, MAPPING, CLUSTER_KB, \"GET _search?format=yaml&search_type=cou\", [{\n  name: \"Params on just after = with existing value\",\n  cursor: { row: 0, column: 36 },\n  rangeToReplace: {\n    start: { row: 0, column: 36 },\n    end: { row: 0, column: 36 }\n  },\n  autoCompleteSet: [{ name: \"count\", meta: \"search_type\" }, { name: \"query_then_fetch\", meta: \"search_type\" }],\n  prefixToAdd: \"\",\n  suffixToAdd: \"\"\n}]);\n\ncontext_tests({\n  \"query\": {\n    \"field\": \"something\"\n  },\n  \"facets\": {},\n  \"size\": 20\n}, MAPPING, SEARCH_KB, \"POST http://somehost/_search\", [{\n  name: \"fullurl - existing dictionary key, no template\",\n  cursor: { row: 1, column: 6 },\n  initialValue: \"query\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 1, column: 3 }, end: { row: 1, column: 10 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}, {\n  name: \"fullurl - existing inner dictionary key\",\n  cursor: { row: 2, column: 7 },\n  initialValue: \"field\",\n  addTemplate: false,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 2, column: 6 }, end: { row: 2, column: 13 } },\n  autoCompleteSet: [\"match_all\", \"term\"]\n}, {\n  name: \"fullurl - existing dictionary key, yes template\",\n  cursor: { row: 4, column: 7 },\n  initialValue: \"facets\",\n  addTemplate: true,\n  prefixToAdd: \"\",\n  suffixToAdd: \"\",\n  rangeToReplace: { start: { row: 4, column: 3 }, end: { row: 4, column: 15 } },\n  autoCompleteSet: [\"facets\", \"query\", \"size\"]\n}]);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core_plugins/console/public/tests/src/integration_tests.js\n// module id = 3462\n// module chunks = 2"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/CA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClp8DA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjEA;;;;;;;ACAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5VA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnsourceRoot":""}